WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.410
子查询特别有助于优化查询性能

00:00:04.410 --> 00:00:07.266
想象你正在为 Parch 和 Posey 编制高级报告

00:00:07.266 --> 00:00:10.785
你会看到按日积累的很多统计数据

00:00:10.785 --> 00:00:13.109
你可以利用该功能支持创建面板 该面板将

00:00:13.109 --> 00:00:16.439
快速识别异常情况 有助于公司进行日常经营

00:00:16.440 --> 00:00:20.500
为此 你需要合并不同表格的数据 然后按日聚合

00:00:20.500 --> 00:00:23.125
你可以利用一个主查询完成所有工作

00:00:23.125 --> 00:00:27.149
但是 通过子查询先聚合各表格

00:00:27.149 --> 00:00:29.875
然后合并各子查询 有一些优势

00:00:29.875 --> 00:00:33.929
首先 我们看一看如何用主查询来做这一工作

00:00:33.929 --> 00:00:36.689
这里 你要明白一点 要妥当地做上述工作

00:00:36.689 --> 00:00:41.399
我们需要合并日期字段 这会导致你可能称之为数据爆炸的后果

00:00:41.399 --> 00:00:45.629
后果基本是 你把一张表格内某一给定日期的每一列

00:00:45.630 --> 00:00:51.500
合并到另一张表格内具有相同日期的每一列

00:00:51.500 --> 00:00:54.134
因此 返回的列数将变得难以置信地大

00:00:54.134 --> 00:00:56.022
由于这一倍增效应

00:00:56.023 --> 00:00:58.200
你需要使用 count distinct 而不是

00:00:58.200 --> 00:01:01.975
普通的 count 统计销售代表的准确计数数据、

00:01:01.975 --> 00:01:04.724
订单以及最终统计网络访问

00:01:04.724 --> 00:01:10.280
来看看聚合前这一数据集变得多大吧

00:01:50.316 --> 00:01:54.879
你可以看到 这样执行合并返回

00:01:54.879 --> 00:01:58.799
79,000 列 需要之后进行聚合

00:01:58.799 --> 00:02:01.030
先对表格进行分别聚合 计数

00:02:01.030 --> 00:02:04.060
就会在小得多的数据集上执行

00:02:04.060 --> 00:02:09.003
这样 你获得同样的结果集会高效得多

00:03:04.699 --> 00:03:10.369
这里 我们已经编写了第一个子查询

00:04:03.919 --> 00:04:08.849
这里是第二个子查询

00:04:08.849 --> 00:04:13.969
我们可以看到 这两个子查询各有大约 1000 列

00:04:13.969 --> 00:04:16.160
这样 当我们编写合并语句时

00:04:16.160 --> 00:04:19.730
我们可以把 1000 列合并到另 1000 列

00:04:19.730 --> 00:04:26.830
然后合并互相匹配的日期 这会极大地降低成本

00:06:04.223 --> 00:06:08.030
这里 我们用了 full join 考虑到

00:06:08.029 --> 00:06:11.644
一张表格内有某月的观察数据 而另一张表格没有

00:06:11.644 --> 00:06:16.633
我们能够看到 两个子查询被分解为大约只有 1000 列

00:06:16.634 --> 00:06:20.655
而最终查询结果也将只有大约 1000 列

00:06:20.654 --> 00:06:24.019
所以 比起我们之前看到的不用子查询进行预先聚合得到的 79,000 列

00:06:24.019 --> 00:06:28.009
这一方法要好上很多

