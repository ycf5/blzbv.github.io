WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.160
将关系数据库做成这样 有多种原因

00:00:04.160 --> 00:00:06.905
现在我们来谈谈其中的一些重点原因

00:00:06.905 --> 00:00:09.440
首先 订单和账户是不同类型的对象

00:00:09.439 --> 00:00:12.974
分开的话 会更容易组织

00:00:12.974 --> 00:00:18.134
第二 多表格结构可以保证更快的查询

00:00:18.135 --> 00:00:21.120
现在我们来仔细分析这两点

00:00:21.120 --> 00:00:27.065
账户表格和订单表格实际上记录的是不同类型的对象

00:00:27.065 --> 00:00:32.289
Parch &amp; Posey 可能想要给每个公司一个账户

00:00:32.289 --> 00:00:36.585
并更新最新信息

00:00:36.585 --> 00:00:39.500
而另一方面

00:00:39.500 --> 00:00:42.246
在录入之后

00:00:42.246 --> 00:00:44.085
订单就不再发生变化了

00:00:44.085 --> 00:00:46.939
一个客户可能有多个订单

00:00:46.939 --> 00:00:48.924
Parch &amp; Posey 不会去改变之前的订单

00:00:48.924 --> 00:00:51.429
而是会添加新订单

00:00:51.429 --> 00:00:53.939
因为对象运作不同

00:00:53.939 --> 00:00:57.559
所以分为不同表格是合理的

00:00:57.560 --> 00:01:01.440
另外 将账户和订单分开

00:01:01.439 --> 00:01:05.730
也是为了数据库修改数据的速度

00:01:05.730 --> 00:01:08.370
你写下查询指令后 它的执行速度

00:01:08.370 --> 00:01:10.829
决定于你需要数据库读取的数据量

00:01:10.829 --> 00:01:16.400
以及需要进行的计算数量和类型

00:01:16.400 --> 00:01:21.990
想象下 如果订单表格中加上了账户名与地址

00:01:21.989 --> 00:01:27.109
也就是说 表格多出了六列的内容：一栏是账户名

00:01:27.109 --> 00:01:29.644
另外五栏是街道地址

00:01:29.644 --> 00:01:33.119
城市、省 (州)、邮编号、国家

00:01:33.120 --> 00:01:35.435
假如客户变更了地址

00:01:35.435 --> 00:01:38.435
在这种情况下 你需要更新每一份订单中的

00:01:38.435 --> 00:01:42.040
这五项地址栏

00:01:42.040 --> 00:01:46.235
也就是五项更新乘以订单数量

00:01:46.234 --> 00:01:48.679
相反 如果将账户细节保存在单独的表格中

00:01:48.680 --> 00:01:52.715
总共也就需要五次更新

00:01:52.715 --> 00:01:56.344
数据集越大 这个影响就越大

00:01:56.344 --> 00:02:00.590
采用这种结构还有一些其他原因

00:02:00.590 --> 00:02:04.969
但这里你需要学习的是如何将账户数据与订单数据联接起来

00:02:04.969 --> 00:02:08.000
这种机制称为 JOIN 接下来我们会学习它

