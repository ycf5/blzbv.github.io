WEBVTT
Kind: captions
Language: zh-CN

00:00:00.670 --> 00:00:03.949
我们首先看看这个数据集

00:00:03.950 --> 00:00:06.214
这是 Parch &amp; Posey

00:00:06.214 --> 00:00:09.775
想要争取业务的潜在客户清单

00:00:09.775 --> 00:00:13.359
需要注意的是 这些信息不涉及任何人的真实个人信息

00:00:13.359 --> 00:00:17.364
这些信息是为本课程随机生成的

00:00:17.364 --> 00:00:19.169
我们的目标是清理这些数据集

00:00:19.170 --> 00:00:21.665
使其更有助分析

00:00:21.664 --> 00:00:27.030
对 text 字段来说 这意味着创造干净的分组 这对之后的聚合有帮助

00:00:27.030 --> 00:00:30.595
我们先从电话号码中提取区号

00:00:30.594 --> 00:00:34.939
由于该数据集中的电话号码的结构保持一致

00:00:34.939 --> 00:00:36.839
因此我们可以发挥自身优势来利用这一点

00:00:36.840 --> 00:00:40.810
区号通常是电话号码的前三个字符

00:00:40.810 --> 00:00:44.325
我们可以使用 left 函数来获取

00:00:44.325 --> 00:00:49.905
通过 left 函数可以从字符串左侧输出一定数量的字符

00:00:49.905 --> 00:00:52.270
并将其作为单独的字符串呈现

00:00:52.270 --> 00:00:54.526
如果我们只想得到电话号码

00:00:54.526 --> 00:00:58.020
我们可以使用 right 函数从右边获取

00:00:58.020 --> 00:00:59.780
当前情况适用 right 函数

00:00:59.780 --> 00:01:01.670
因为我们知道

00:01:01.670 --> 00:01:04.810
整个 phone_number 字段的字符数是一致的

00:01:04.810 --> 00:01:06.344
如果不一致

00:01:06.344 --> 00:01:08.924
依然可以从右侧输出一个字符串

00:01:08.924 --> 00:01:10.799
只要讲得通就行

00:01:10.799 --> 00:01:13.804
length 函数返回字符串的长度

00:01:13.805 --> 00:01:19.995
因此在这个数据集中 将返回的电话号码的长度为 12 个字符

00:01:19.995 --> 00:01:23.925
前三个字符是区号

00:01:23.924 --> 00:01:25.859
加上后面跟着的破折号

00:01:25.859 --> 00:01:27.670
共四个字符

00:01:27.670 --> 00:01:35.349
可以将 right 函数表示为 length 函数

00:01:40.120 --> 00:01:45.450
可以看到 phone_number_alt 字段中的结果

00:01:45.450 --> 00:01:49.790
与 phone_number_only 字段中的结果相同

00:01:49.790 --> 00:01:54.415
这是因为电话号码减去 4 个字符的长度

00:01:54.415 --> 00:02:00.315
将被解析为 12 减 4 或 8

00:02:00.314 --> 00:02:04.405
与 phone_number_only 字段的结果相同

00:02:04.405 --> 00:02:07.266
在其它函数中使用函数时

00:02:07.266 --> 00:02:11.300
请务必记住首先评估最内层的函数

00:02:11.300 --> 00:02:13.430
其次是外层函数

