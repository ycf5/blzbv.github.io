WEBVTT
Kind: captions
Language: en

00:00:00.760 --> 00:00:03.200
As we've discussed earlier,
the reason for

00:00:03.200 --> 00:00:08.050
going through the clustering process is
to help simplify a situation where you

00:00:08.050 --> 00:00:11.820
have way too many objects to deal with
individually, but where it could be

00:00:11.820 --> 00:00:16.899
painfully problematic to try to deal
with all of the objects in the same way.

00:00:16.899 --> 00:00:20.269
So with clustering,
we're trying to get to a middle ground

00:00:20.269 --> 00:00:24.480
that can make dealing with all of
the objects a little simpler, but yet

00:00:24.480 --> 00:00:27.160
still maintain effectiveness.

00:00:27.160 --> 00:00:31.699
But something to keep in mind is that
not every object in a specific cluster

00:00:31.699 --> 00:00:36.369
will match perfectly with every other
object in that cluster, especially when

00:00:36.369 --> 00:00:41.079
dealing with a large number of variables
to determine that clustering solution.

00:00:41.079 --> 00:00:45.739
It may well be that for a given
variable, an object might match better

00:00:45.740 --> 00:00:48.910
with those objects in
an entirely different cluster.

00:00:48.909 --> 00:00:53.640
But again, clustering takes into
account all of the variables, and

00:00:53.640 --> 00:00:57.689
groups the objects where the similar
objects that are assigned to the same

00:00:57.689 --> 00:01:01.959
cluster, have predominantly
the same characteristics.

00:01:01.960 --> 00:01:04.400
Let's take a quick look
at what I mean by this.

00:01:05.790 --> 00:01:08.030
Here we have two clusters of stores.

00:01:09.069 --> 00:01:14.079
Cluster 1 could be described as stores
that are in a cold climate, have a high

00:01:14.079 --> 00:01:18.250
population density and have a bigger
retail footprint for their stores.

00:01:20.019 --> 00:01:23.420
Cluster 2 could be described
as being in a hot climate

00:01:23.420 --> 00:01:28.000
with a lower population density and
tend to be smaller stores.

00:01:28.000 --> 00:01:33.655
But as you can see, Store 6 doesn't
quite fit all of those descriptors.

00:01:33.655 --> 00:01:37.515
It actually has a bigger footprint
than one of the stores in Cluster 1.

00:01:37.515 --> 00:01:44.075
But overall, Store 6 fits better with
Cluster 2, rather than Cluster 1.

00:01:44.075 --> 00:01:48.555
So when we're talking about how many
clusters we should have in our solution,

00:01:48.555 --> 00:01:52.885
we need to consider that fewer clusters
might create more of this kind of

00:01:52.885 --> 00:01:57.660
situation, but more clusters may
not work out as well operationally.

00:01:58.950 --> 00:02:03.100
Because there's not really
an objectively measured best clustering

00:02:03.099 --> 00:02:09.349
solution, there's really no objective
test for that best number of clusters.

00:02:09.349 --> 00:02:14.269
What we're trying to do is to get to
a solution that gets us the best overall

00:02:14.270 --> 00:02:18.509
results for whatever the business
problem is that we're trying to solve.

00:02:19.689 --> 00:02:24.319
The point is that determining the number
of clusters is not always the easiest or

00:02:24.319 --> 00:02:26.519
most apparent choice.

00:02:26.520 --> 00:02:28.820
Let's take a look at
a fairly simple set of data.

00:02:30.439 --> 00:02:33.770
How many clusters should there be?

00:02:33.770 --> 00:02:38.739
Two, four, six?

00:02:40.419 --> 00:02:45.319
Sometimes it really comes down to
a balance of what is practical and

00:02:45.319 --> 00:02:46.719
what best fits the data.

