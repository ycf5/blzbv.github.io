WEBVTT
Kind: captions
Language: en

00:00:00.630 --> 00:00:02.840
Imagine we have two data sets.

00:00:02.840 --> 00:00:05.230
One is a list of existing customers.

00:00:05.230 --> 00:00:08.410
And the second is a list of prospects
that you bought from a company.

00:00:09.980 --> 00:00:13.600
We want to reach out to the prospects
to turn them into customers.

00:00:13.600 --> 00:00:18.080
But we don't want to contact people
who are already our customers.

00:00:18.080 --> 00:00:22.580
The problem in this scenario is that we
need to eliminate our existing customers

00:00:22.580 --> 00:00:24.630
from the prospects list.

00:00:24.630 --> 00:00:30.250
However, given that there probably isn't
a nice ID code to match on between these

00:00:30.250 --> 00:00:34.770
two files, then we need to find a way
to join the data sets on other fields.

00:00:36.390 --> 00:00:38.990
We can use the name and address fields.

00:00:38.990 --> 00:00:44.000
But what we find in practice is that we
don't get good matches between names and

00:00:44.000 --> 00:00:46.870
addresses representing the same people,

00:00:46.870 --> 00:00:50.180
because they're frequently
spelled slightly differently.

00:00:50.180 --> 00:00:54.160
An Andrew Main at 25 State S-T for
Street,

00:00:54.160 --> 00:01:00.770
is not going to join with Andy Main at
25 State Street spelled out in full.

00:01:00.770 --> 00:01:05.040
So, this is where
Fuzzy Matching comes in.

00:01:05.040 --> 00:01:07.500
Fuzzy Matching is really powerful, and

00:01:07.500 --> 00:01:13.120
it'll enable you to join two data sets
together where a regular join may fail.

00:01:13.120 --> 00:01:17.490
Fuzzy Matching identifies
non-identical duplicates of a dataset

00:01:17.490 --> 00:01:20.540
by specifying parameters to match on.

00:01:20.540 --> 00:01:23.920
The values don't have to be
exactly the same because,

00:01:23.920 --> 00:01:29.150
Fuzzy Matching uses algorithms to score
how similar two words or phrases are.

