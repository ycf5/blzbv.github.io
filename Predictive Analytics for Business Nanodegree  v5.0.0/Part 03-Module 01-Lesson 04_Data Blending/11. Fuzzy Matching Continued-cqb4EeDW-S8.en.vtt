WEBVTT
Kind: captions
Language: en

00:00:00.166 --> 00:00:03.703
We aren't going to get into the nitty
gritty of fuzzy matching here.

00:00:03.703 --> 00:00:08.379
But so you understand how fuzzy
matching works, it looks at words and

00:00:08.379 --> 00:00:14.300
calculate a closeness of match score,
based on the similarity of these words.

00:00:14.300 --> 00:00:17.250
You could find some basic
information about two of the most

00:00:17.250 --> 00:00:21.530
popular algorithms used in fuzzy
matching in the notes below the video.

00:00:22.870 --> 00:00:25.380
When we fuzzy match two
data sets together,

00:00:25.380 --> 00:00:29.010
the best practice is to use
a sort of waterfall approach

00:00:29.010 --> 00:00:33.950
where we go from most accurate matches
down to least accurate matches.

00:00:33.950 --> 00:00:37.171
The first thing we want to do
is actually join the two data

00:00:37.171 --> 00:00:41.430
sets to identify the records that
do match perfectly together.

00:00:41.430 --> 00:00:44.180
And then remove those
records from the mix so

00:00:44.180 --> 00:00:47.000
that we can start fuzzy matching
the rest of the records.

00:00:48.010 --> 00:00:52.950
We need to select fields that we believe
will identify the records uniquely,

00:00:52.950 --> 00:00:56.000
like using their first name,
last name and address fields.

00:00:57.690 --> 00:01:01.730
With the exact match records
removed from the whole data set,

00:01:01.730 --> 00:01:07.370
we then need to decide on the different
set of fields we want to fuzzy match on.

00:01:07.370 --> 00:01:10.690
For example,
if we're working with customers,

00:01:10.690 --> 00:01:16.370
we may have their first name, last name,
address, city, state, zip, phone number.

00:01:16.370 --> 00:01:18.100
And even their email.

00:01:18.100 --> 00:01:20.960
Using different combinations
of these fields,

00:01:20.960 --> 00:01:24.110
we can build out fuzzy
matching approaches.

00:01:24.110 --> 00:01:27.740
For instance, we might want to
start with just first name,

00:01:27.740 --> 00:01:30.430
last name, address and zip code.

00:01:30.430 --> 00:01:35.010
For the remaining records that did not
match, we might want to try first name,

00:01:35.010 --> 00:01:37.040
last name and phone number.

00:01:37.040 --> 00:01:39.930
For the remaining records
that didn't match again,

00:01:39.930 --> 00:01:43.200
maybe we'll try just last name and
address.

00:01:43.200 --> 00:01:46.040
Each time we're trying
to find some duplicates,

00:01:46.040 --> 00:01:49.290
code them with the methodology
used to match them, and

00:01:49.290 --> 00:01:55.100
then remove them from the set until we
have exhausted all matching methods.

00:01:55.100 --> 00:02:00.344
The remaining records most be
considered to be non-duplicates.

