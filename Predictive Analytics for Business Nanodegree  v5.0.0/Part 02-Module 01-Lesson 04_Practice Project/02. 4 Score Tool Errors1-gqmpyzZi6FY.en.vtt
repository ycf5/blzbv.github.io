WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.350
Hi, we're going to walk through on all tricks workflow where we run into

00:00:04.350 --> 00:00:09.755
errors and we try to figure out what's going on and hopefully solve those errors quickly.

00:00:09.755 --> 00:00:12.720
So the example I'm going to use is we're going to bring in

00:00:12.720 --> 00:00:16.400
the old diamond dataset from the first project.

00:00:16.400 --> 00:00:22.410
We're going to try and apply the linear regression formula that we give you in

00:00:22.410 --> 00:00:23.580
that project to see

00:00:23.580 --> 00:00:28.770
how closely the predicted price from the model is to the actual price of the diamond.

00:00:28.770 --> 00:00:31.500
So, before we do anything we have to name our field.

00:00:31.500 --> 00:00:35.255
So, we're going to call this predicted price.

00:00:35.255 --> 00:00:36.350
After we do that,

00:00:36.350 --> 00:00:37.940
now we can type in an expression.

00:00:37.940 --> 00:00:41.600
So, I'm just going to copy in the expression that

00:00:41.600 --> 00:00:46.570
we got from the linear regression model.

00:00:46.570 --> 00:00:50.220
So, right away, here you can see there's a parse error.

00:00:50.220 --> 00:00:55.234
We don't need to have this first part to run

00:00:55.234 --> 00:01:01.190
this formula because the expression will return the value for predicted price.

00:01:01.190 --> 00:01:04.870
So, you don't need price referenced in this expression.

00:01:04.870 --> 00:01:08.180
If we try and run this we're going to get an error.

00:01:08.180 --> 00:01:10.000
Couple reasons why.

00:01:10.000 --> 00:01:13.295
Here you can see there's a parse error at character two.

00:01:13.295 --> 00:01:15.170
So, if you get one, two.

00:01:15.170 --> 00:01:19.735
This comma, they don't know what to do with commas and numbers,

00:01:19.735 --> 00:01:21.605
so we are getting rid of those.

00:01:21.605 --> 00:01:23.730
If we run it again,

00:01:23.730 --> 00:01:27.000
we're going to see another parse error.

00:01:27.000 --> 00:01:28.340
This time at 13.

00:01:28.340 --> 00:01:34.480
So this is this x, instead of an x it needs to be an asterisk to be multiplication.

00:01:34.480 --> 00:01:37.075
So, go ahead and update all of those.

00:01:37.075 --> 00:01:40.050
Okay, so this looks right.

00:01:40.050 --> 00:01:41.760
If you try to run it,

00:01:41.760 --> 00:01:43.020
it still doesn't work.

00:01:43.020 --> 00:01:49.300
So, now the error saying formula tried to apply numeric operator to string value.

00:01:49.300 --> 00:01:51.665
So, it's treating carat,

00:01:51.665 --> 00:01:55.335
cut and clarity all as string value,

00:01:55.335 --> 00:02:00.775
so that means as text and not as the variables in the dataset.

00:02:00.775 --> 00:02:04.630
So, if we go to our variables we can see that,

00:02:04.630 --> 00:02:08.079
oh, here's our existing fields.

00:02:08.079 --> 00:02:09.570
So, if we want to use carat,

00:02:09.570 --> 00:02:11.400
if we just double-click that,

00:02:11.400 --> 00:02:16.560
it has to have the brackets around it.

00:02:16.560 --> 00:02:20.155
So, if we go in here and replace carat with that.

00:02:20.155 --> 00:02:24.980
Now, this is going to work but these two still won't.

00:02:24.980 --> 00:02:31.995
So, let me go ahead and replace these with the actual variable names.

00:02:31.995 --> 00:02:34.790
Now, if I try and run this,

00:02:34.790 --> 00:02:36.690
I'm going to get an error again,

00:02:36.690 --> 00:02:41.280
and so this is where this might start to get a little frustrating

00:02:41.280 --> 00:02:46.330
because you think you have the formula written out correctly,

00:02:46.330 --> 00:02:52.750
but what we actually need to do is look back at our data and see what's going on.

00:02:52.750 --> 00:02:58.300
So, maybe there's an issue coming into the formula tool.

00:02:58.300 --> 00:03:01.595
So, we're gonna run it so we can look at this browse tool.

00:03:01.595 --> 00:03:10.769
If we see here, carat is indeed a number but it looks like cut is text,

00:03:10.769 --> 00:03:17.755
so string, and it looks like our third variable clarity is also a string.

00:03:17.755 --> 00:03:20.345
Luckily, we have these fields that do have

00:03:20.345 --> 00:03:24.945
a numeric values that correspond to the string values.

00:03:24.945 --> 00:03:29.000
So, we're going to update our formula to cut underscore

00:03:29.000 --> 00:03:34.520
ord and clarity underscore ord for those two variables.

00:03:34.520 --> 00:03:36.000
So, let me do that real quick.

00:03:36.000 --> 00:03:38.080
I'm just going to highlight this,

00:03:38.080 --> 00:03:41.545
existing fields, switch it out,

00:03:41.545 --> 00:03:44.320
do the same here.

00:03:44.320 --> 00:03:47.180
So, now we think we have it all right.

00:03:47.180 --> 00:03:48.960
Let's go ahead and run it.

00:03:48.960 --> 00:03:50.790
Oh, there's still an issue.

00:03:50.790 --> 00:03:54.910
So we're still getting this tried to apply numeric operator to string value.

00:03:54.910 --> 00:03:56.375
What's going on?

00:03:56.375 --> 00:04:00.590
So, this is where one of the most typical things you're going to do to

00:04:00.590 --> 00:04:05.655
solve an error in Alteryx is by using the select tool.

00:04:05.655 --> 00:04:07.940
So, if we bring in the select tool,

00:04:07.940 --> 00:04:12.545
we can see what datatype every variable is,

00:04:12.545 --> 00:04:17.660
and as you can see here everything is currently a v underscore string which means

00:04:17.660 --> 00:04:23.630
variable string and we need it to be some sort of numeric datatype.

00:04:23.630 --> 00:04:28.375
So, we're going to update the variables that we used this formula.

00:04:28.375 --> 00:04:29.590
In this case carat,

00:04:29.590 --> 00:04:36.155
cut or null and clarity underscore ord with clarity or null,

00:04:36.155 --> 00:04:38.750
and we're going to switch those two doubles.

00:04:38.750 --> 00:04:43.120
So, doubles is one of the more flexible numeric types,

00:04:43.120 --> 00:04:48.885
so we suggest that for every numeric variable that you use throughout the course.

00:04:48.885 --> 00:04:52.280
If it is a categorical variable though,

00:04:52.280 --> 00:04:55.430
we'll get into that later and why that should stay a string,

00:04:55.430 --> 00:04:59.425
but for now any numerical variable should be a double.

00:04:59.425 --> 00:05:03.195
So, now finally, we should be able to run it,

00:05:03.195 --> 00:05:05.170
hey, and there is no issue.

00:05:05.170 --> 00:05:07.470
So, if we want, we can look at the end here.

00:05:07.470 --> 00:05:09.760
So, let's run it one more time.

00:05:09.760 --> 00:05:14.165
See, okay, we got the formula to run.

00:05:14.165 --> 00:05:17.590
We can see now the predicted price and the actual price.

00:05:17.590 --> 00:05:25.160
It looks like for- let me pull this up a bit so we can see more at a given time.

00:05:25.160 --> 00:05:26.810
So, for a lot of these,

00:05:26.810 --> 00:05:31.005
it seems pretty close or maybe a couple 100 off,

00:05:31.005 --> 00:05:33.325
this one seems kind of odd.

00:05:33.325 --> 00:05:41.720
But these are all opportunities for us to reevaluate the formula and look into it deeper.

