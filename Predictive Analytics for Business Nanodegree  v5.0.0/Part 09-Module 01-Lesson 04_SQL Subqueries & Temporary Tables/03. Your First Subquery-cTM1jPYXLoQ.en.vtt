WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.805
Let's break down that example.

00:00:02.805 --> 00:00:05.820
First, we'll start by querying the underlying table to

00:00:05.820 --> 00:00:09.051
make sure that data makes sense for what we're trying to do.

00:00:09.051 --> 00:00:15.620
Next, we'll count up all the events in each channel, in each day.

00:00:51.899 --> 00:00:58.460
The last step is that we want to average across the events column we've created.

00:00:58.460 --> 00:01:03.328
In order to do that, we'll want to query against the results from this query.

00:01:03.328 --> 00:01:06.200
We can do that by wrapping the query in parentheses

00:01:06.200 --> 00:01:11.620
and using it in the FROM clause of the next query that we write.

00:01:13.329 --> 00:01:17.519
It is now a query within a query,

00:01:17.519 --> 00:01:20.609
also known as a subquery.

00:01:20.609 --> 00:01:22.875
Subqueries are required to have aliases,

00:01:22.875 --> 00:01:24.840
which are added after the parentheses,

00:01:24.840 --> 00:01:27.700
the same way you would add an alias to a table.

00:01:27.700 --> 00:01:32.275
Here, we're just selecting all of the data from the subquery.

00:01:32.275 --> 00:01:36.037
Let's go the last mile and average events for each channel.

00:01:36.037 --> 00:01:39.645
Since the subquery acts like one table in the FROM clause,

00:01:39.644 --> 00:01:56.205
we'll put a GROUP BY clause after the subquery.

00:01:56.206 --> 00:02:10.670
Since we're now reordering based on this new aggregation,

00:02:10.669 --> 00:02:14.000
we no longer need the ORDER BY statement in the subquery.

00:02:14.000 --> 00:02:18.219
So let's take that out to keep things clean.

00:02:19.189 --> 00:02:22.784
Just to make it super clear,

00:02:22.784 --> 00:02:26.044
let's break down how this new query runs.

00:02:26.044 --> 00:02:29.019
First, your inner query will run.

00:02:29.020 --> 00:02:32.260
It might sound like a no-brainer, but it's important.

00:02:32.259 --> 00:02:34.209
Your inner query must actually run on its

00:02:34.210 --> 00:02:38.200
own as the database will treat it as an independent query.

00:02:38.199 --> 00:02:40.074
Once your inner query is complete,

00:02:40.074 --> 00:02:42.219
the rest of the query also known as

00:02:42.219 --> 00:02:48.000
the outer query will run across the result set created by the inner query.

00:02:48.000 --> 00:02:51.340
A nice feature that mode and many other SQL editors share is

00:02:51.340 --> 00:02:55.479
the ability to highlight a portion of the query and run only that portion.

00:02:55.479 --> 00:02:59.204
This is especially helpful when making changes to an inner query.

00:02:59.205 --> 00:03:00.256
You can make the change,

00:03:00.256 --> 00:03:03.009
then quickly check the inner queries output to make

00:03:03.009 --> 00:03:07.000
sure it looks correct before running the outer query again.

