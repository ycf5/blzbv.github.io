WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.805
我们来分析一下这个例子

00:00:02.805 --> 00:00:05.820
首先我们将查询基础表

00:00:05.820 --> 00:00:09.051
以确保数据对我们的工作有用

00:00:09.051 --> 00:00:15.620
接下来我们将统计每天每个渠道的所有事件

00:00:51.899 --> 00:00:58.460
最后一步是在创建的事件列中计算平均值

00:00:58.460 --> 00:01:03.328
为此 我们需要从该查询结果中进行查询

00:01:03.328 --> 00:01:06.200
将查询放在括号中

00:01:06.200 --> 00:01:11.620
并将其用在我们编写的下一个查询的 FROM 子句

00:01:13.329 --> 00:01:17.519
现在它是查询中的查询

00:01:17.519 --> 00:01:20.609
也称为子查询

00:01:20.609 --> 00:01:22.875
子查询需要别名

00:01:22.875 --> 00:01:24.840
在括号后面添加别名

00:01:24.840 --> 00:01:27.700
就像为表格添加别名一样

00:01:27.700 --> 00:01:32.275
现在我们只从子查询中选择所有的数据

00:01:32.275 --> 00:01:36.037
最后我们来看看每个渠道的事件平均值

00:01:36.037 --> 00:01:39.645
由于子查询就像 FROM 子句中的一个表格一样

00:01:39.644 --> 00:01:56.205
我们将在子查询之后放置一个 GROUP BY 子句

00:01:56.206 --> 00:02:10.670
由于现在是根据这个新的聚合重新排序

00:02:10.669 --> 00:02:14.000
因此不再需要在子查询中使用 ORDER BY 语句

00:02:14.000 --> 00:02:18.219
整洁起见 我们把它移除

00:02:19.189 --> 00:02:22.784
要让它超级清晰

00:02:22.784 --> 00:02:26.044
就需要分析一下这个新查询的运行方式

00:02:26.044 --> 00:02:29.019
首先将运行内层查询

00:02:29.020 --> 00:02:32.260
这可能听起来很容易 实则非常重要

00:02:32.259 --> 00:02:34.209
内层查询必须独立运行

00:02:34.210 --> 00:02:38.200
因为数据库将其视为独立查询

00:02:38.199 --> 00:02:40.074
一旦内层查询完成

00:02:40.074 --> 00:02:42.219
查询的其余部分 也即外层查询

00:02:42.219 --> 00:02:48.000
将针对内层查询创建的结果集来运行

00:02:48.000 --> 00:02:51.340
该模式和许多其它 SQL 编辑器共同的一个优秀功能

00:02:51.340 --> 00:02:55.479
是两者均能够突出显示部分查询 并仅运行该部分查询

00:02:55.479 --> 00:02:59.204
这在更改内层查询时尤其有用

00:02:59.205 --> 00:03:00.256
你可以更改内层查询

00:03:00.256 --> 00:03:03.009
然后快速检查内层查询的返回值

00:03:03.009 --> 00:03:07.000
以确保再次运行外层查询之前它看上去是正确的

