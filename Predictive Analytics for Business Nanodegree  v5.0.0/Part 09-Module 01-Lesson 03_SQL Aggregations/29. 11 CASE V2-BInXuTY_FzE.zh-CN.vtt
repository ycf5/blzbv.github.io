WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.544
假设你自己是 Parch &amp; Posey 的市场经理

00:00:03.544 --> 00:00:08.044
你想把 Facebook 与其它市场渠道进行对比

00:00:08.044 --> 00:00:10.695
你知道 Facebook 是你业务的最重要渠道 但是

00:00:10.695 --> 00:00:12.839
它是否大过所有其它渠道的总和？

00:00:12.839 --> 00:00:15.525
我们得找出答案 为此

00:00:15.525 --> 00:00:17.385
你得创建一个派生 (Derive) 列

00:00:17.385 --> 00:00:20.685
也就是说你从当前列中提取数据 然后进行修改

00:00:20.684 --> 00:00:23.910
在前面的课程中 我们使用算术来完成

00:00:23.910 --> 00:00:25.710
在这里 我们使用 CASE 语句

00:00:25.710 --> 00:00:29.635
这是 SQL 处理 IF - THEN 逻辑的方式

00:00:29.635 --> 00:00:35.189
CASE 语句会附有至少一对 WHEN - THEN 语句

00:00:35.189 --> 00:00:38.390
在 SQL 中 这两者等同于 IF - THEN

00:00:38.390 --> 00:00:42.704
完成时必须有 END 一词

00:00:42.704 --> 00:00:48.259
可以看到 CASE 语句会检查每一列以检查

00:00:48.259 --> 00:00:53.710
条件语句 channel = 'facebook' 是否为真

00:00:53.710 --> 00:01:00.200
如果是真 其结果 yes 就出现在 is_facebook 列中

00:01:00.200 --> 00:01:05.600
如果不是 在 is_facebook 列中会出现 no

00:01:05.599 --> 00:01:08.789
用这个查询能轻松查看当前情况

00:01:08.790 --> 00:01:12.484
因为它同时包含了 CASE 语句及 channel 列自身

00:01:12.484 --> 00:01:14.429
你可以检查每一行以确认 channel 是否

00:01:14.430 --> 00:01:17.240
满足条件 channel = 'facebook'

00:01:17.239 --> 00:01:21.689
然后查看由 CASE 语句生成的列中的结果

00:01:21.689 --> 00:01:26.810
现在 我们希望能在这个查询中的空值处填入 no

00:01:26.810 --> 00:01:30.644
我们可以用 ELSE 语句 该语句可以捕捉

00:01:30.644 --> 00:01:35.545
WHEN - THEN 语句中没有的值

00:01:35.545 --> 00:01:38.040
如果我们想让新列不仅持续追踪我们的

00:01:38.040 --> 00:01:40.965
Facebook 渠道 还追踪 direct 渠道

00:01:40.965 --> 00:01:46.270
我们可以修改我们的 CASE 语句 用 OR 运算符

00:01:48.040 --> 00:01:51.060
WHEN 语句类似于

00:01:51.060 --> 00:01:54.519
你想在 WHERE 子句中放入的逻辑条件

00:01:54.519 --> 00:02:00.719
因此你可以用 AND、LIKE、IN 或者其他任何你已见过的逻辑运算符

00:02:00.719 --> 00:02:03.420
假设你负责 Parch &amp; Posey 的运营

00:02:03.420 --> 00:02:06.765
你想根据订单大小将订单进行分组

00:02:06.765 --> 00:02:11.000
以得到更精细的库存规划

00:02:11.000 --> 00:02:13.349
你可以用 CASE 语句定义多个输出

00:02:13.349 --> 00:02:18.930
通过使用多个 WHEN - THEN 语句

00:02:18.930 --> 00:02:22.740
在这个例子中 WHEN 语句

00:02:22.740 --> 00:02:25.340
将会对所写的订单进行评估

00:02:25.340 --> 00:02:28.995
如果某一行 total 列中的值是 600

00:02:28.995 --> 00:02:32.265
将会得出一个超过 500 的结果

00:02:32.264 --> 00:02:36.269
如果 total 列的值是 169

00:02:36.270 --> 00:02:38.790
数据库会先检查 total 是否大于 500

00:02:38.789 --> 00:02:42.239
因为这是第一个 WHEN 语句

00:02:42.240 --> 00:02:44.930
169 并不大于 500

00:02:44.930 --> 00:02:47.879
因此我们接着评估下一个 WHEN

00:02:47.879 --> 00:02:52.740
直到逻辑 WHEN 语句评估结果为真

00:02:52.740 --> 00:02:58.843
其对应的 THEN 语句将会记录到 total_group 列

00:02:58.842 --> 00:03:06.569
对于 169 当 WHEN 语句的结果为 101 - 103 之间时才会结束

00:03:06.569 --> 00:03:11.169
在以上工作中 最好就是构建不重叠的 WHEN 语句

00:03:11.169 --> 00:03:16.299
条件语句 "total &gt; 500"

00:03:16.300 --> 00:03:18.640
与 "total &gt; 300" 重叠

00:03:18.639 --> 00:03:22.889
对每个大于 500 的值 就会有些混淆

00:03:22.889 --> 00:03:25.000
更好的方法是

00:03:25.000 --> 00:03:28.349
定义不会与其它组重叠的特殊组

00:03:28.349 --> 00:03:31.495
为此 你可以将多种条件语句串联起来

00:03:31.495 --> 00:03:36.990
用 AND 和 OR 与你在 WHERE 子句中串联的方式相同

00:03:43.580 --> 00:03:47.219
在本课的结尾部分

00:03:47.219 --> 00:03:49.870
我们将要更进一步

00:03:49.870 --> 00:03:53.000
将其与之前学习的聚合结合起来

