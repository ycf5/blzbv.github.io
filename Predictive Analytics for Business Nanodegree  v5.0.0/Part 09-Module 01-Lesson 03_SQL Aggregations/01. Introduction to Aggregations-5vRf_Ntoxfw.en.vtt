WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:05.215
So far in this course, we've used SQL to join tables using left, right,

00:00:05.215 --> 00:00:10.580
and inner joins, and filter the results using Where and On clauses.

00:00:10.580 --> 00:00:13.170
Sometimes, it's useful to view row-level data.

00:00:13.170 --> 00:00:16.410
For example, we might want to look at all the individual orders for

00:00:16.410 --> 00:00:20.095
a given sales person to see how they're performing in a given month.

00:00:20.095 --> 00:00:22.980
But other times, row-level data is overwhelming,

00:00:22.980 --> 00:00:26.370
and ultimately, less valuable than aggregated data.

00:00:26.370 --> 00:00:29.310
Counting up all the orders in each region in each month,

00:00:29.310 --> 00:00:33.030
for example, will be pretty inconvenient when looking at row-level data.

00:00:33.030 --> 00:00:37.020
One rep's order volume is low enough to look at individual rows,

00:00:37.020 --> 00:00:40.380
but the entire region's volume is way too high.

00:00:40.380 --> 00:00:45.265
Instead, a single number of orders for each month will be much better.

00:00:45.265 --> 00:00:49.715
Fortunately, databases are great at aggregating data.

00:00:49.715 --> 00:00:51.720
The SQL syntax is easy to learn.

00:00:51.720 --> 00:00:53.164
If you're familiar with Excel,

00:00:53.164 --> 00:00:55.575
SQL commands are pretty similar.

00:00:55.575 --> 00:00:59.745
Count, counts how many rows are in a particular column.

00:00:59.745 --> 00:01:03.948
Sum, adds together all the values in a particular column.

00:01:03.948 --> 00:01:08.640
Min and Max, return the lowest and highest values in a particular column.

00:01:08.640 --> 00:01:14.410
And Average, calculates the average of all the values in a particular column.

00:01:14.410 --> 00:01:17.785
These functions operate down columns, not across rows.

00:01:17.785 --> 00:01:22.110
So you can do things like sum up all the quantities of paper ever delivered.

00:01:22.110 --> 00:01:25.125
Instead of getting results set many thousands of rows long,

00:01:25.125 --> 00:01:28.220
you just get one line with the answer.

00:01:28.220 --> 00:01:31.120
In practice, you'll find yourself using row-level output for

00:01:31.120 --> 00:01:35.369
the early exploratory work when searching your database to better understand the data.

00:01:35.369 --> 00:01:37.545
As you get a sense for what the data looks like

00:01:37.545 --> 00:01:39.600
and begin to look for answers to your questions,

00:01:39.600 --> 00:01:42.650
aggregates become more helpful.

