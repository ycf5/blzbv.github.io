{
  "data": {
    "lesson": {
      "id": 293027,
      "key": "614cf95a-13bf-406c-b092-e757178e633b",
      "title": "Basic SQL",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this section, you will gain knowledge about SQL basics for working with a single table. You will learn the key commands to filter a table in many different ways.  ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/614cf95a-13bf-406c-b092-e757178e633b/293027/1545065383074/Basic+SQL+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/614cf95a-13bf-406c-b092-e757178e633b/293027/1545065376956/Basic+SQL+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 303805,
          "key": "9f672e93-fdcd-4332-a6ef-41edcf8416f1",
          "title": "Video: SQL Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f672e93-fdcd-4332-a6ef-41edcf8416f1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394563,
              "key": "18de24f6-1f4e-432a-b780-844d68d9c544",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Z8WNfx9Oq9s",
                "china_cdn_id": "Z8WNfx9Oq9s.mp4"
              }
            }
          ]
        },
        {
          "id": 303812,
          "key": "10de11bf-fedb-4519-9393-92ab7a5bff77",
          "title": "Video: The Parch & Posey Database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "10de11bf-fedb-4519-9393-92ab7a5bff77",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394546,
              "key": "424d277e-717c-4970-b61a-21c87e311392",
              "title": "Parch & Posey Database",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "JOMI560DgXg",
                "china_cdn_id": "JOMI560DgXg.mp4"
              }
            }
          ]
        },
        {
          "id": 354365,
          "key": "63924491-9491-4fb8-b39b-611a613c25fd",
          "title": "Video + Text: The Parch & Posey Database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63924491-9491-4fb8-b39b-611a613c25fd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Parch & Posey Database",
                "uri": "https://video.udacity-data.com/topher/2020/May/5eb5533b_parch-and-posey/parch-and-posey.sql"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 395008,
              "key": "03a137a7-b05a-49d0-a890-6ebff8afeb76",
              "title": "Entity Relationship Diagrams",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YY2TAJLEINA",
                "china_cdn_id": "YY2TAJLEINA.mp4"
              }
            },
            {
              "id": 354373,
              "key": "d32c3c80-44cb-4241-85c2-a153a41d2e8e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Entity Relationship Diagrams\n\nAn **entity relationship diagram** (ERD) is a common way to view data in a database.  Below is the ERD for the database we will use from Parch & Posey.  These diagrams help you visualize the data you are analyzing  including:\n\n1. The names of the tables.\n2. The columns in each table.\n3. The way the tables work together.  \n\n**You can think of each of the boxes below as a spreadsheet.**",
              "instructor_notes": ""
            },
            {
              "id": 354374,
              "key": "0b8a67d1-88e3-4173-a0b9-514b7c2084bb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59821d7d_screen-shot-2017-08-02-at-11.14.25-am/screen-shot-2017-08-02-at-11.14.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0b8a67d1-88e3-4173-a0b9-514b7c2084bb",
              "caption": "",
              "alt": null,
              "width": 809,
              "height": 494,
              "instructor_notes": null
            },
            {
              "id": 354380,
              "key": "c605644e-d550-4a99-b7e4-9cb9e7447c91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What to Notice\n\nIn the Parch & Posey database there are five tables (essentially 5 spreadsheets): \n1. **web_events**\n2. **accounts**\n3. **orders**\n4. **sales_reps**\n5. **region** \n\nYou can think of each of these tables as an individual spreadsheet.  Then the columns in each spreadsheet are listed below the table name.  For example, the **region** table has two columns: `id` and `name`.  Alternatively the **web_events** table has four columns.\n",
              "instructor_notes": ""
            },
            {
              "id": 356016,
              "key": "1bba74ee-c849-4c28-bbc1-44bb2a15b8b0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59852269_screen-shot-2017-08-04-at-6.41.07-pm/screen-shot-2017-08-04-at-6.41.07-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1bba74ee-c849-4c28-bbc1-44bb2a15b8b0",
              "caption": "",
              "alt": null,
              "width": 568,
              "height": 324,
              "instructor_notes": null
            },
            {
              "id": 355940,
              "key": "a5b704b4-0d26-4e21-937b-3c74605d9d30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The \"crow's foot\" that connects the tables together shows us how the columns in one table relate to the columns in another table.  In this first lesson, you will be learning the basics of how to work with SQL to interact with a single table.  In the next lesson, you will learn more about why these connections are so important for working with SQL and relational databases.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 402383,
          "key": "f0bda721-9e47-4d8a-a795-53cb24890b83",
          "title": "Quiz: ERD Fundamentals",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0bda721-9e47-4d8a-a795-53cb24890b83",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 436685,
              "key": "47d80405-4a6f-4864-9393-9a4ddea79286",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59e94524_screen-shot-2017-10-19-at-5.33.45-pm/screen-shot-2017-10-19-at-5.33.45-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/47d80405-4a6f-4864-9393-9a4ddea79286",
              "caption": "",
              "alt": "",
              "width": 812,
              "height": 560,
              "instructor_notes": null
            },
            {
              "id": 553474,
              "key": "7bfcec4a-97c3-4bb1-84db-9186d62ff861",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Note: glossy_qty is incorrect, it is actually gloss_qty in the database**",
              "instructor_notes": ""
            },
            {
              "id": 402384,
              "key": "24077807-dd1f-42ec-8ac9-c08888347ecd",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "24077807-dd1f-42ec-8ac9-c08888347ecd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Use the above image and your new knowledge of ERDs to match each `Term` to the appropriate `Definition`. "
                },
                "concepts_label": "Definition",
                "answers_label": "Term",
                "concepts": [
                  {
                    "text": "A column name in the Parch & Posey database.",
                    "correct_answer": {
                      "id": "a1505677541034",
                      "text": "primary_poc"
                    }
                  },
                  {
                    "text": "A table name in the Parch & Posey database.",
                    "correct_answer": {
                      "id": "a1505677610120",
                      "text": "web_events"
                    }
                  },
                  {
                    "text": "A collection of tables that share connected data stored in a computer.",
                    "correct_answer": {
                      "id": "a1505677920781",
                      "text": "Database"
                    }
                  },
                  {
                    "text": "A diagram that shows how data is structured in a database.",
                    "correct_answer": {
                      "id": "a1505678050165",
                      "text": "ERD"
                    }
                  },
                  {
                    "text": "A language that allows us to access data stored in a database.",
                    "correct_answer": {
                      "id": "a1505678067181",
                      "text": "SQL"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1505677541034",
                    "text": "primary_poc"
                  },
                  {
                    "id": "a1505677920781",
                    "text": "Database"
                  },
                  {
                    "id": "a1505678050165",
                    "text": "ERD"
                  },
                  {
                    "id": "a1505678067181",
                    "text": "SQL"
                  },
                  {
                    "id": "a1505677610120",
                    "text": "web_events"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 354177,
          "key": "f0d15068-cf0d-4cbb-9e4a-5d6aa11a0535",
          "title": "Text: Map of SQL Content",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0d15068-cf0d-4cbb-9e4a-5d6aa11a0535",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 354264,
              "key": "d13be94e-7cc9-4dd9-a5b8-1e29c93583bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Introduction\n\nThroughout the next three lessons, you will be learning how to write **Structured Query Language (SQL)** to interact with a database here in the classroom.  You will not need to download any software, and you will still be able to test your skills!\n\nSQL is an extremely in demand skill.  [Tons of jobs use SQL](https://www.zippia.com/advice/what-jobs-use-sql/), and in the next lessons you will be learning how to utilize SQL to analyze data and answer business questions.\n\n## Project\n\nThe skills you learn in the classroom are directly extendable to writing **SQL** in other environments outside this classroom.  For the project at the end of these lessons, you will download a program that will allow you to write code on your local machine.  You will then analyze and answer business questions using data associated with a music store by querying their database.\n\n## Lesson Outline\n\nThere are three lessons in this Nanodegree aimed at helping you understand how to write SQL queries.  If you choose to take the [Predictive Analytics Nanodegree](https://www.udacity.com/course/predictive-analytics-for-business-nanodegree--nd008) or the [Data Analyst Nanodegree](https://www.udacity.com/course/data-analyst-nanodegree--nd002) programs, these three lessons will also be a part of these programs.  However, there is also an additional lesson on Advanced SQL also taught by Derek!\n\nThe three lessons in this course aim at the following components of SQL:\n\n* **SQL Basics** - Here you will get your first taste at how SQL works, and learn the basics of the SQL language.  You will learn how to write code to interact with tables similar to the ones we analyzed in Excel earlier.  Specifically, you will learn a little about databases, the basic syntax of SQL, and you will write your first queries!<br><br>\n* **SQL Joins** - In this lesson, you will learn the real power of SQL.  You will learn about Entity Relationship Diagrams (ERDs), and how to join multiple tables together from a relational database.  The power to join tables is what really moved companies to adopt this approach to holding data.<br><br>\n* **SQL Aggregations** - In this final lesson, you will learn some more advanced features of SQL.  You will gain the ability to summarize data from multiple tables in a database. <br><br>\n\nAt the end of these three lessons, you will be ready to tackle the project.  The project aims to assure you have mastered these three topics, but you will also see some of the more advanced queries that were not covered in this course.   These are just meant to introduce you to the advanced material, but don't feel discouraged if you didn't get these - they were beyond the scope of the class, and they are not required to pass the project!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 303806,
          "key": "e0b107e9-9739-4dca-8cb2-78f6f6809aff",
          "title": "Video: Why SQL",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0b107e9-9739-4dca-8cb2-78f6f6809aff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 303889,
              "key": "678ef03c-6e47-429d-8672-a30c865a7516",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction\n\nBefore we dive into writing Structured Query Language (SQL) queries, let's take a look at what makes SQL and the databases that utilize SQL so popular.  \n\nI think it is an important distinction to say that SQL is a **language**.  Hence, the last word of SQ**L** being **language**.  SQL is used all over the place beyond the databases we will utilize in this class.  With that being said, SQL is most popular for its interaction with databases.  For this class, you can think of a **database** as a bunch of excel spreadsheets all sitting in one place.  Not all databases are a bunch of excel spreadsheets sitting in one place, but it is a reasonable idea for this class.\n\n# Why Do Data Analysts Use SQL?",
              "instructor_notes": ""
            },
            {
              "id": 394564,
              "key": "605276c9-01e9-4125-b3cd-63e548adf620",
              "title": "Why Do Analysts Like SQL",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uCNOtUht2Xc",
                "china_cdn_id": "uCNOtUht2Xc.mp4"
              }
            },
            {
              "id": 303891,
              "key": "bb10cab2-b16b-47e2-92fd-11afab569054",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nThere are some major advantages to using **traditional relational databases,** which we interact with using SQL.  The five most apparent are:\n\n* SQL is easy to understand.\n* Traditional databases allow us to access data directly.\n* Traditional databases allow us to audit and replicate our data.\n* SQL is a great tool for analyzing multiple tables at once.\n* SQL allows you to analyze more complex questions than dashboard tools like Google Analytics.\n\nYou will experience these advantages first hand, as we learn to write SQL to interact with data.  \n\nI realize you might be getting a little nervous or anxious to start writing code.  This might even be the first time you have written in any sort of programming language.  I assure you, we will work through examples to help assure you feel supported the whole time to take on this new challenge!\n\n\n## SQL vs. NoSQL\n\nYou may have heard of NoSQL, which stands for not only SQL.  Databases using NoSQL allow for you to write code that interacts with the data a bit differently than what we will do in this course.  These NoSQL environments tend to be particularly popular for web based data, but less popular for data that lives in spreadsheets the way we have been analyzing data up to this point.  One of the most popular NoSQL languages is called [MongoDB](https://www.mongodb.com/).  Udacity has a full course on MongoDB that you can take for free [here](https://www.udacity.com/course/data-wrangling-with-mongodb--ud032), but these will not be a focus of this program.  \n\nNoSQL is not a focus of analyzing data in this Nanodegree program, but you might see it referenced outside this course!",
              "instructor_notes": ""
            },
            {
              "id": 354303,
              "key": "1cdb464f-c9c9-4753-b859-fbbf79b1fb87",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Why Do Businesses Choose SQL?",
              "instructor_notes": ""
            },
            {
              "id": 394545,
              "key": "59dbe20e-c09a-4004-a508-53196bea9232",
              "title": "Why Businesses Choose Databases",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "j4ey7--h9r8",
                "china_cdn_id": "j4ey7--h9r8.mp4"
              }
            },
            {
              "id": 394550,
              "key": "c50b154c-9c38-42d1-89be-eb80182eaf71",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Why Businesses Like Databases\n\n1. **Data integrity is ensured** - only the data you want entered is entered, and only certain users are able to enter data into the database. <br><br>\n\n2.  **Data can be accessed quickly** - SQL allows you to obtain results very quickly from the data stored in a database.  Code can be optimized to quickly pull results.  <br><br>\n\n3.  **Data is easily shared** - multiple individuals can access data stored in a database, and the data is the same for all users allowing for consistent results for anyone with access to your database.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 303808,
          "key": "45d7a40b-6cd7-4171-88a3-434ac16055af",
          "title": "Video: How Databases Store Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "45d7a40b-6cd7-4171-88a3-434ac16055af",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394560,
              "key": "f36cb40c-bf6b-4420-8a44-70cf05880fb9",
              "title": "How Databases Store Data",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "H0C9z_sRvLE",
                "china_cdn_id": "H0C9z_sRvLE.mp4"
              }
            },
            {
              "id": 394562,
              "key": "f06e4f20-b63e-4404-96d2-a4bc1d3f7cf9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A few key points about data stored in SQL databases:\n\n1.  **Data in databases is stored in tables that can be thought of just like Excel spreadsheets.** <br>For the most part, you can think of a database as a bunch of Excel spreadsheets.  Each spreadsheet has rows and columns.  Where each row holds data on a transaction, a person, a company, etc., while each column holds data pertaining to a particular aspect of one of the rows you care about like a name, location, a unique id, etc.<br><br>\n\n2. **All the data in the same column must match in terms of data type. ** <br>An entire column is considered quantitative, discrete, or as some sort of string.  This means if you have one row with a string in a particular column, the entire column might change to a text data type.  **This can be very bad if you want to do math with this column!**<br><br>\n\n3. **Consistent column types are one of the main reasons working with databases is fast.** <br>Often databases hold **a LOT** of data.  So, knowing that the columns are all of the same type of data means that obtaining data from a database can still be fast.<br><br>\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 303810,
          "key": "68a3a1cb-c13c-41e4-9f8b-93371b4d8cfe",
          "title": "Text + Quiz: Types of Databases",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "68a3a1cb-c13c-41e4-9f8b-93371b4d8cfe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308845,
              "key": "d218cf1b-0845-4e9e-bdd0-1982bc50331c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Types of Databases\n\n### SQL Databases\n\nThere are many different types of SQL databases designed for different purposes. In this course we will use [**Postgres**](https://www.postgresql.org/) within the classroom, which is a popular open-source database with a very complete library of analytical functions. \n\nSome of the most popular databases include:\n1. MySQL\n2. Access\n3. Oracle\n4. Microsoft SQL Server\n5. Postgres\n \nYou can also write SQL within other programming frameworks like Python, Scala, and HaDoop.  \n\n### Small Differences\n\nEach of these SQL databases may have subtle differences in syntax and available functions -- for example, MySQL doesn’t have some of the functions for modifying dates as Postgres. **Most** of what you see with Postgres will be directly applicable to using SQL in other frameworks and database environments.  For the differences that do exist, you should check the documentation.  Most SQL environments have great documentation online that you can easily access with a quick Google search.\n\nThe article [here](https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems) compares three of the most common types of SQL: SQLite, PostgreSQL, and MySQL. \n\nYou will use PostgreSQL for the lessons in this course, but you are not required to download it to your machine. We provide SQL workspaces in the classroom throughout the lessons. You may download PostgreSQL [here](https://www.postgresql.org/) if you'd like though.\n\nSo with that, let's jump in!\n",
              "instructor_notes": ""
            },
            {
              "id": 354337,
              "key": "f3d49476-f172-447e-b5e8-b8fc0409f5e4",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f3d49476-f172-447e-b5e8-b8fc0409f5e4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check all of the below that are true about your learning experience here in the classroom.",
                "answers": [
                  {
                    "id": "a1501692492866",
                    "text": "The code you write in the classroom is exactly what you would write to analyze data in PostgreSQL.",
                    "is_correct": true
                  },
                  {
                    "id": "a1501692548579",
                    "text": "The code you write in the classroom is exactly what you would write to analyze data in MySQL.",
                    "is_correct": false
                  },
                  {
                    "id": "a1501692569609",
                    "text": "The code you write in the classroom will allow you to easily pick up any SQL programming including Microsoft SQL Server, Oracle, or SQLite. ",
                    "is_correct": true
                  },
                  {
                    "id": "a1501692634084",
                    "text": "When you leave the classroom, you will have to re-learn how to use SQL, as it works differently outside the classroom.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 303811,
          "key": "e4564313-0e76-4fe0-a526-a5c5d0a90606",
          "title": "Video: Types of Statements",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e4564313-0e76-4fe0-a526-a5c5d0a90606",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394599,
              "key": "28be0a81-2b5e-4bf6-bfbc-84e602ce2262",
              "title": "Types Of Statements",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vLvJbIz94C4",
                "china_cdn_id": "vLvJbIz94C4.mp4"
              }
            },
            {
              "id": 394590,
              "key": "6046d8cc-7702-440a-a93a-2e38e0295c44",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The key to SQL is understanding **statements**.  A few statements include:\n\n1. **CREATE TABLE** is a statement that creates a new table in a database.\n2.  **DROP TABLE** is a statement that removes a table in a database.\n3.  **SELECT** allows you to read data and display it.  This is called a **query**.\n\nThe **SELECT** statement is the common statement used by analysts, and you will be learning all about them throughout this course!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 354338,
          "key": "5f3395cb-bfcf-417e-863b-891d272d407e",
          "title": "Statements",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5f3395cb-bfcf-417e-863b-891d272d407e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 354339,
              "key": "85f6e528-d6b5-4e92-9178-35410ac6d1b8",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "85f6e528-d6b5-4e92-9178-35410ac6d1b8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In SQL, you can think of a statement as (select all that apply):",
                "answers": [
                  {
                    "id": "a1501693169150",
                    "text": "A piece of correctly written SQL code.",
                    "is_correct": true
                  },
                  {
                    "id": "a1501693689328",
                    "text": "A way to manipulate data stored in a database.",
                    "is_correct": true
                  },
                  {
                    "id": "a1501693723176",
                    "text": "A sentence.",
                    "is_correct": true
                  },
                  {
                    "id": "a1501693823397",
                    "text": "A way to read data stored in a database.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 354350,
              "key": "323f0aa0-964a-42b6-978d-eaa30ab92185",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "323f0aa0-964a-42b6-978d-eaa30ab92185",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the following lessons we will focus on which type of query?",
                "answers": [
                  {
                    "id": "a1501694441393",
                    "text": "DROP",
                    "is_correct": false
                  },
                  {
                    "id": "a1501694466349",
                    "text": "CREATE",
                    "is_correct": false
                  },
                  {
                    "id": "a1501694489113",
                    "text": "QUERY",
                    "is_correct": false
                  },
                  {
                    "id": "a1501694498685",
                    "text": "SELECT",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 303813,
          "key": "507317c6-33af-4467-9f9c-75cdf1e2832d",
          "title": "Video: SELECT & FROM",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "507317c6-33af-4467-9f9c-75cdf1e2832d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394675,
              "key": "521bc5c4-828d-4791-a4ce-6aad19a8a3eb",
              "title": "SELECT & FROM Statements",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "urOYuuav4BY",
                "china_cdn_id": "urOYuuav4BY.mp4"
              }
            },
            {
              "id": 394676,
              "key": "ca7b5244-9c83-4c3e-b23d-1e1942c4d35d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here you were introduced to the SQL command that will be used in every query you write: SELECT ... FROM ....\n\n1. **SELECT** indicates which column(s) you want to be given the data for.<br><br>\n2. **FROM** specifies from which table(s) you want to select the columns.  Notice the columns need to exist in this table.\n\nIf you want to be provided with the data from all columns in the table, you use \"*\", like so:  \n- SELECT * FROM orders\n\nNote that using SELECT does not _create_ a new table with these columns in the database, it just provides the data to you as the results, or output, of this command.\n\nYou will use this SQL SELECT statement in every query in this course, but you will be learning a few additional statements and operators that can be used along with them to ask more advanced questions of your data.\n",
              "instructor_notes": ""
            },
            {
              "id": 796739,
              "key": "cbdd111d-1c00-490a-a937-0c3d854cdd57",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "   ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 303814,
          "key": "7d4666c8-01bd-4212-bdcf-a172e0fcb7ab",
          "title": "Your First Queries in SQL Workspace",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7d4666c8-01bd-4212-bdcf-a172e0fcb7ab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 303892,
              "key": "7f4be737-3bab-4bf8-8fbc-bf4f85e14f82",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Udacity SQL Workspace Environment\nBelow you can see a SQL workspace, which we will use frequently from here on, where you can practice writing SQL queries in the classroom.  <br>Here is a short tutorial video on using the SQL Workspace, and Udacity Workspace environments in general.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 791043,
              "key": "456082d0-5e4c-4f2b-8501-67e9b0ef2475",
              "title": "Intro To SQL Workspaces",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "w6XcuK22YCk",
                "china_cdn_id": "w6XcuK22YCk.mp4"
              }
            },
            {
              "id": 558873,
              "key": "3daa1235-8534-498e-ab59-2120b53fa435",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "1f4686db-5b62-4a0d-a431-187f9c0d6b36",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 337984,
              "key": "ae2fab73-4716-40c8-b9e6-578a468eb120",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Your First SQL Statement\nTo get started, try using the right panel in the SQL workspace above to type in and evaluate the query (shown again below) that you saw in the previous video. You can begin typing right next to the number 1.  \n```\nSELECT *\nFROM orders;\n```\nOnce you have  typed in your SQL code, you can click on the blue **EVALUATE** button to run the query.  This may take a moment.  An alternative to clicking EVALUATE is to use **control + Enter** to execute your query.  If you get an error, it will sometimes cover the EVALUATE button, so this second option is very nice!\n\nYou will notice that your instructor Derek uses \"demo\" tables, like `FROM demo.orders` (and he will continue to do this in future lessons), but you should write your queries using the table names exactly as shown in the Schema on the left, with \"demo\" removed, like `FROM orders`.  \n\n\n\n### SELECT and FROM in Every SQL Query\n\nEvery query will have at least a **SELECT** and  **FROM** statement.  The **SELECT** statement is where you put the **columns** for which you would like to show the data.  The **FROM** statement is where you put the **tables** from which you would like to pull data.\n\n### Your Turn\n\nTry writing your own query to select only the `id`, `account_id`, and `occurred_at` columns for all orders in the **orders** table.<br>\n\n\n### Checking the Output of your Query\nIf you see an error message after executing your query, no problem! Programmers get errors all the time! Mistakes are opportunities to learn. :)\n\nJust take a look at what the error says, check the syntax of your query compared to your notes or what was shown in the lesson video or text, make revisions, and try it again. See what you can learn from your mistake, and make a note about it.\n\nIf you see a message saying \"Success!\" this means you had no syntax errors and your query executed well. It does not necessarily mean that you got your desired results though! It is still up to you to examine your output and see if what you got was what you wanted. \n\nYou can also check on the next page after each quiz, to see how your query compares to the solution that we provide. We highly recommend that you try writing your query first, before looking at any solution. :)\n\n\n\n##### Downloading the Schema Tables\n(In some versions of this lesson, you might be able to download the Parch & Posey database to your computer from the Resources tab in the left sidebar of your classroom, but this is not necessary for you to do at all.)",
              "instructor_notes": ""
            },
            {
              "id": 558874,
              "key": "b4c4ca97-b3bd-4f87-a714-170170de8203",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "b647a3f2-365f-449c-bc2f-4ef90c18691e",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 391969,
          "key": "5a16ac08-fec2-475e-98d2-510611301aaf",
          "title": "Solution: Your First Queries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5a16ac08-fec2-475e-98d2-510611301aaf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391970,
              "key": "38aa4c87-8b28-4290-bae5-71c3a28777b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution to Previous Concept\n\nYou may use the workspace below to try out this solution if you like.\n\n```\nSELECT id, account_id, occurred_at\nFROM orders;\n```",
              "instructor_notes": ""
            },
            {
              "id": 478626,
              "key": "9b26154f-1662-4b9d-96f2-82feadabc236",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "9bc04d90-c98d-4812-b712-c23c87e248b7",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303815,
          "key": "9f94748d-bf2e-4428-a954-24281382f13f",
          "title": "Formatting Best Practices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f94748d-bf2e-4428-a954-24281382f13f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 303899,
              "key": "62d6516e-57a3-4e1a-93e0-2747853f6833",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In case you want to test any of the ideas below, I have embedded a SQL workspace environment at the bottom of this page.\n\n# Formatting Your Queries\n\n### Using Upper and Lower Case in SQL\n\nSQL queries can be run successfully whether characters are written in upper- or lower-case. In other words, SQL queries are not case-sensitive.  The following query:\n\n```\nSELECT account_id\nFROM orders\n```\nis the same as:\n\n```\nselect account_id\nfrom orders\n```\n\nwhich is also the same as:\n\n```\nSeLeCt AcCoUnt_id\nFrOm oRdErS\n```\n\n**However**, you may have noticed that we have been capitalizing SELECT and FROM, while we leave table and column names in lower case. This is because even though SQL is case-insensitive, **it is common and best practice to capitalize all SQL commands, like SELECT and FROM, and keep everything else in your query lower case.**\n\nCapitalizing command words makes queries easier to read, which will matter more as you write more complex queries.  For now, it is just a good habit to start getting into, to make your SQL queries more readable.\n\nOne other note: The text data stored in SQL tables can be either upper or lower case, and SQL *is* case-sensitive in regard to this text data.\n\n\n### Avoid Spaces in Table and Variable Names\nIt is common to use underscores and avoid spaces in column names.  It is a bit annoying to work with spaces in SQL.  In Postgres if you have spaces in column or table names, you need to refer to these columns/tables with double quotes around them (Ex: FROM \"Table Name\" as opposed to FROM table_name). In other environments, you might see this as square brackets instead (Ex: FROM [Table Name]).\n\n### Use White Space in Queries\nSQL queries ignore spaces, so you can add as many spaces and blank lines between code as you want, and the queries are the same. This query\n\n```\n SELECT account_id FROM orders\n```\nis equivalent to this query:\n```\nSELECT account_id\nFROM orders\n```\nand this query (but please don't ever write queries like this):\n```\nSELECT              account_id\n\nFROM               orders\n```\n\n\n### Semicolons\n\nDepending on your SQL environment, your query may need a semicolon at the end to execute.  Other environments are more flexible in terms of this being a  \"requirement.\"  It is considered best practice to put a semicolon at the end of each statement, which also allows you to run multiple queries at once if your environment allows this.\n\nBest practice:\n\n```\nSELECT account_id\nFROM orders;\n```\n\nSince our environment here doesn't require it, you will see solutions written without the semicolon:\n\n```\nSELECT account_id\nFROM orders\n```\n\n### Phew!!! That was a lot of rules. Let's just write some queries.  You will make mistakes, but that is part of the learning process!\n",
              "instructor_notes": ""
            },
            {
              "id": 558875,
              "key": "2bed2ba5-d383-4b06-af13-73279c0e5dcf",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "00473ce1-8200-4857-b9e5-719e57b6e5cd",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303816,
          "key": "3eb5a138-5fab-4ed3-8207-2259087b49af",
          "title": "Video: LIMIT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3eb5a138-5fab-4ed3-8207-2259087b49af",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394600,
              "key": "c7dc7465-370e-4786-99e8-ce9abc40d6a3",
              "title": "LIMIT Statement",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cCPHNNhBgpQ",
                "china_cdn_id": "cCPHNNhBgpQ.mp4"
              }
            },
            {
              "id": 337975,
              "key": "6773ef47-e1eb-4f32-8aba-e4c319a83cc0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nWe have already seen the **SELECT** (to choose columns) and **FROM** (to choose tables) statements.  The **LIMIT** statement is useful when you want to see just the first few rows of a table.  This can be much faster for loading than if we load the entire dataset.\n\nThe **LIMIT** command is always the very last part of a query.  An example of showing just the first 10 rows of the orders table with all of the columns might look like the following:\n\n```\nSELECT *\nFROM orders\nLIMIT 10;\n```\n\nWe could also change the number of rows by changing the 10 to any other number of rows.  \n\n",
              "instructor_notes": ""
            },
            {
              "id": 790747,
              "key": "00d1147a-c107-4e59-8952-5b80ecc4ddd8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "   ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 391971,
          "key": "a0182348-e91a-4e0b-ac6d-00577e5115cb",
          "title": "Quiz: LIMIT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a0182348-e91a-4e0b-ac6d-00577e5115cb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391972,
              "key": "10c422d3-8847-49a0-ae5e-5c9d9dd6c8a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Can You Use LIMIT?\n\n1. Try using LIMIT yourself below by writing a query that displays all the data in the `occurred_at`, `account_id`, and `channel` columns of the web_events table, and limits the output to only the first 15 rows.  ",
              "instructor_notes": ""
            },
            {
              "id": 558876,
              "key": "60b0f661-6ad9-4a2a-bc20-48c88863bada",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "45e4540c-e5f4-4207-af16-15cc18d9fe7f",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 391974,
              "key": "023aeab2-19e7-4762-b691-1e68521706f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using a Separate Text Editor to Write SQL Queries and Save Your Notes\n\nYou might want to use a separate text editor to write SQL queries, and make notes on what they are used for. I copy and paste my SQL queries back and forth between the classroom and the Atom text editor, which you can download free [here](https://atom.io/) if you'd like.  \n\nYou can use any method or text editor for writing your queries and keeping your own notes. Notepad and Word are other options. The screenshot below shows what my file looks like in Atom.\n\nI save my SQL query files in Atom with a `.sql` extension to get highlighting support with SQL syntax.\n\nAll of this is optional for you though. You can do all of your work in the Udacity classroom if you like, but using a separate text editor is a way to save your notes and look back at them later. ",
              "instructor_notes": ""
            },
            {
              "id": 391975,
              "key": "44af2975-eaf2-40f1-bfd1-077d05f3f342",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59af2b65_screen-shot-2017-08-02-at-10.48.24-pm/screen-shot-2017-08-02-at-10.48.24-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/44af2975-eaf2-40f1-bfd1-077d05f3f342",
              "caption": "",
              "alt": "",
              "width": 1382,
              "height": 480,
              "instructor_notes": null
            },
            {
              "id": 463265,
              "key": "093f9723-8cd4-4a04-99bf-6a8367782afd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Course Flow\n\nA few notes about the course flow from this point.  As you are introduced to new SQL functionality, we will prompt you to practice writing queries on your own.  \n\nYou will usually watch Derek answer a business question with a new SQL command.  Then we'll ask you a few questions to practice use the same functionality.  For each question, a solution is provided on the following page, so that you can check your answer.\n\nYou can usually see this structure in the concept names: **Video** shows Derek performing the query, **Quiz** provides questions and a workspace for you to practice, and **Solutions** provides the solutions for the quiz questions.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 391967,
          "key": "9fb38d47-1a85-4478-b77f-600a2eb329a6",
          "title": "Solution: LIMIT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9fb38d47-1a85-4478-b77f-600a2eb329a6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391968,
              "key": "ac9bb94b-67ac-4bc1-ac83-e93d8dfe73c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution to Previous LIMIT Question\n\n```\nSELECT occurred_at, account_id, channel\nFROM web_events\nLIMIT 15;\n```",
              "instructor_notes": ""
            },
            {
              "id": 558877,
              "key": "e88e0565-f565-409d-967e-cf1ac03fe7af",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "e1926d27-579c-4450-af01-fcac45f53ad7",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303817,
          "key": "ef98495e-88e9-4938-8f60-14be1b099e3c",
          "title": "Video: ORDER BY",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ef98495e-88e9-4938-8f60-14be1b099e3c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394601,
              "key": "d2575372-7a71-4086-8113-acb3542075fd",
              "title": "ORDER BY Statement",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wqj2As31LqI",
                "china_cdn_id": "wqj2As31LqI.mp4"
              }
            },
            {
              "id": 337977,
              "key": "c7d97a02-4029-452c-893f-84bdeb540716",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **ORDER BY** statement allows us to sort our results using the data in any column.  If you are familiar with Excel or Google Sheets, using **ORDER BY** is similar to sorting a sheet using a column. A key difference, however, is that **using ORDER BY in a SQL query only has temporary effects, for the results of that query, unlike sorting a sheet by column in Excel or Sheets.** \n\nIn other words, when you use ORDER BY in a SQL query, your output will be sorted that way, but then the next query you run will encounter the unsorted data again. It's important to keep in mind that this is different than using common spreadsheet software, where sorting the spreadsheet by column actually alters the data in that sheet until you undo or change that sorting. This highlights the meaning and function of a SQL \"query.\"\n\nThe **ORDER BY** statement always comes in a query after the **SELECT** and **FROM** statements, but before the **LIMIT** statement. If you are using the **LIMIT** statement, it will always appear last. As you learn additional commands, the order of these statements will matter more.  \n\n### Pro Tip\n\nRemember `DESC` can be added after the column in your **ORDER BY** statement to sort in descending order, as the default is to sort in ascending order.\n",
              "instructor_notes": ""
            },
            {
              "id": 790748,
              "key": "47060c8e-73cf-4fc3-93ca-afdf35fe4a91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 391977,
          "key": "b8b3bf45-1503-49fc-a326-8f10f6967758",
          "title": "Quiz: ORDER BY",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b8b3bf45-1503-49fc-a326-8f10f6967758",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391978,
              "key": "dec1a199-34da-4a70-aaac-9fb521eb26c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n# Practice\n\nLet's get some practice using **ORDER BY**:\n\n1. Write a query to return the 10 earliest orders in the **orders** table. Include the `id`, `occurred_at`, and `total_amt_usd`.<br><br>\n\n2.  Write a query to return the top 5 **orders** in terms of largest `total_amt_usd`. Include the `id`, `account_id`, and `total_amt_usd`.<br><br>\n\n3.  Write a query to return the lowest 20 **orders** in terms of smallest `total_amt_usd`. Include the `id`, `account_id`, and `total_amt_usd`.<br><br>\n\nRemember, **just because a query successfully runs, does not mean you have the correct results.**  To see if your query worked like you wanted it to,  you need to examine your output to see if it satisfies the problem or the question. You can also compare your query and results with the solution on the following page (concept).\n",
              "instructor_notes": ""
            },
            {
              "id": 558878,
              "key": "99e8c6d5-b04d-40cc-9f7c-e7570416bd8e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "b7783364-68c9-4be1-9c4d-5cdd8085d15f",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 391980,
          "key": "e3fb05c3-e396-4905-b863-4aabee62b933",
          "title": "Solutions: ORDER BY",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e3fb05c3-e396-4905-b863-4aabee62b933",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391981,
              "key": "8b463b9c-7187-46d9-8b2c-2c332931ae7e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solutions to previous ORDER BY questions\n\n1. Write a query to return the 10 earliest orders in the **orders** table. Include the `id`, `occurred_at`, and `total_amt_usd`.\n```\nSELECT id, occurred_at, total_amt_usd\nFROM orders\nORDER BY occurred_at\nLIMIT 10;\n```\n\n2. Write a query to return the top 5 **orders** in terms of largest `total_amt_usd`. Include the `id`, `account_id`, and `total_amt_usd`.\n```\nSELECT id, account_id, total_amt_usd\nFROM orders\nORDER BY total_amt_usd DESC \nLIMIT 5;\n```\n\n3. Write a query to return the lowest 20 **orders** in terms of smallest `total_amt_usd`. Include the `id`, `account_id`, and `total_amt_usd`.\n```\nSELECT id, account_id, total_amt_usd\nFROM orders\nORDER BY total_amt_usd\nLIMIT 20;\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 558879,
              "key": "03f1a8ec-499d-4d27-bca3-b333cf12434f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "6f1b1d61-18a7-4614-9170-ca1b391f4080",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 354472,
          "key": "6e9b4fc1-8c5b-40e5-936d-8428a1c516d9",
          "title": "Video: ORDER BY Part II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6e9b4fc1-8c5b-40e5-936d-8428a1c516d9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 354473,
              "key": "6796c461-bd8f-430d-97c5-cedf44ec2ddb",
              "title": "Order By Part II",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XQCjREdOqwE",
                "china_cdn_id": "XQCjREdOqwE.mp4"
              }
            },
            {
              "id": 354482,
              "key": "28f529f2-0266-4999-9d2c-a14a594f1fe5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here, we saw that we can **ORDER BY** more than one column at a time. When you provide a list of columns in an **ORDER BY** command, the sorting occurs using the leftmost column in your list first, then the next column from the left, and so on.  We still have the ability to flip the way we order using **DESC**.  \n\n",
              "instructor_notes": ""
            },
            {
              "id": 790749,
              "key": "842df3e8-408d-4fdc-89b0-8a289f215865",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 391982,
          "key": "1f1906c2-6903-47bb-a0f7-de7a65924c04",
          "title": "Quiz: ORDER BY Part II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f1906c2-6903-47bb-a0f7-de7a65924c04",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391983,
              "key": "05b3cce4-a487-4c7b-bcaf-5e30b4fd8154",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Questions\n1.  Write a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order). <br><br>\n2. Now write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order). <br><br>\n3. Compare the results of these two queries above. How are the results different when you switch the column you sort on first?<br><br>",
              "instructor_notes": ""
            },
            {
              "id": 558880,
              "key": "4e8e00d2-75d6-4a46-823c-60ce8171956a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "9d3d385b-8f48-4f17-8e5c-a122dd986e95",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 391985,
          "key": "97f31a3c-3c46-4321-ab04-d2da05c2f5ec",
          "title": "Solutions: ORDER BY Part II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "97f31a3c-3c46-4321-ab04-d2da05c2f5ec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391986,
              "key": "3fc9643d-6a08-4914-9565-23a2fab3ea10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solutions to previous ORDER BY Questions\n\n1. Write a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order).\n```\nSELECT id, account_id, total_amt_usd\nFROM orders\nORDER BY account_id, total_amt_usd DESC;\n```\n\n2. Now write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order).\n```\nSELECT id, account_id, total_amt_usd\nFROM orders\nORDER BY total_amt_usd DESC, account_id;\n```\n\n3. Compare the results of these two queries above. How are the results different when you switch the column you sort on first?<br>\n**In query #1, all of the orders for each account ID are grouped together, and then within each of those groupings, the orders appear from the greatest order amount to the least. In query #2, since you sorted by the total dollar amount first, the orders appear from greatest to least regardless of which account ID they were from. Then they are sorted by account ID next. (The secondary sorting by account ID is difficult to see here, since only if there were two orders with equal total dollar amounts would there need to be any sorting by account ID.) **",
              "instructor_notes": ""
            },
            {
              "id": 558881,
              "key": "61c89a50-289d-4d86-960f-c377d340bf76",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "d991fb7d-c57d-4dcf-a07f-8a1657333e4a",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303818,
          "key": "b9307eec-5f86-40c2-a8b5-af95515b618b",
          "title": "Video: WHERE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b9307eec-5f86-40c2-a8b5-af95515b618b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394668,
              "key": "74887bba-9ded-40d8-a1ee-3279043b828e",
              "title": "WHERE Statements ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mN0uTnlXaxg",
                "china_cdn_id": "mN0uTnlXaxg.mp4"
              }
            },
            {
              "id": 354489,
              "key": "17dec2a6-b381-4604-96dc-3013df420886",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Using the **WHERE** statement, we can display *subsets* of tables based on conditions that must be met. You can also think of the **WHERE** command as *filtering* the data.\n\n This video above shows how this can be used, and in the upcoming concepts, you will learn some common operators that are useful with the **WHERE**' statement.\n\nCommon symbols used in **WHERE** statements include:\n\n1. `>` (greater than)<br><br>\n2. `<` (less than)<br><br>\n3. `>=` (greater than or equal to)<br><br>\n4. `<=` (less than or equal to)<br><br>\n5. `=` (equal to)<br><br>\n6. `!=` (not equal to)",
              "instructor_notes": ""
            },
            {
              "id": 790750,
              "key": "eef053f3-453d-4cdd-9347-ec725b4d9c8c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 391987,
          "key": "61a40e81-a1e4-4ced-bf68-7c5c5c2682de",
          "title": "Quiz: WHERE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "61a40e81-a1e4-4ced-bf68-7c5c5c2682de",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391989,
              "key": "a60dc868-d5cb-474f-82d6-8663bb3e370e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Questions\n\nWrite a query that:\n1. Pulls the first 5 rows and all columns from the **orders** table that have a dollar amount of `gloss_amt_usd` greater than or equal to 1000.<br><br>\n2. Pulls the first 10 rows and all columns from the **orders** table that have a `total_amt_usd` less than 500.",
              "instructor_notes": ""
            },
            {
              "id": 558882,
              "key": "d388cfb2-2caa-4426-999f-9498abbe41a1",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "0404cc5c-c4f3-4deb-aeaf-6f07b4f13109",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 391991,
          "key": "9f15e6e6-fe0e-4f79-8cd1-8c405e8079a9",
          "title": "Solutions: WHERE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f15e6e6-fe0e-4f79-8cd1-8c405e8079a9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391992,
              "key": "c3799855-6494-44a0-a580-f7cd31c1cccb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution from previous WHERE Questions\n\n1. \n```\nSELECT *\nFROM orders\nWHERE gloss_amt_usd >= 1000\nLIMIT 5;\n```\n\n2. \n```\nSELECT *\nFROM orders\nWHERE total_amt_usd < 500\nLIMIT 10;\n```\n\nYou will notice when using these **WHERE** statements, we do not need to **ORDER BY** unless we want to actually order our data.  Our condition will work without having to do any sorting of the data.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 558883,
              "key": "129e1d59-2302-4ad4-ab29-2b3c769f92f4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "446e280b-2ce5-483f-bf81-fa95896a2787",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303819,
          "key": "288998fd-1aa1-4e02-ac41-b0bf8aac23cc",
          "title": "Video: WHERE with Non-Numeric Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "288998fd-1aa1-4e02-ac41-b0bf8aac23cc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394541,
              "key": "2ea9eb35-ea26-4d56-8065-60fe62789f6b",
              "title": "WHERE with Non-Numeric Data",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_pLx7MHOyjo",
                "china_cdn_id": "_pLx7MHOyjo.mp4"
              }
            },
            {
              "id": 337991,
              "key": "dfae52f0-901b-487d-9618-df8e1be1f66e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **WHERE** statement can also be used with non-numeric data.  We can use the `=` and `!=` operators here.  You need to be sure to use single quotes (just be careful if you have quotes in the original text) with the text data, not double quotes.\n\nCommonly when we are using **WHERE** with non-numeric data fields, we use the **LIKE**, **NOT**,  or **IN** operators.  We will see those before the end of this lesson!",
              "instructor_notes": ""
            },
            {
              "id": 790751,
              "key": "0435c501-e9ad-456a-8ecc-6106b149c140",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 391993,
          "key": "7c55878d-35d0-4c97-b176-55076b955299",
          "title": "Quiz: WHERE with Non-Numeric",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c55878d-35d0-4c97-b176-55076b955299",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 391994,
              "key": "29d45d75-4860-4742-b35a-f6563a0f46fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice Question Using WHERE with Non-Numeric Data\n\n1. Filter the accounts table to include the company `name`, `website`, and the primary point of contact (`primary_poc`) just for the Exxon Mobil company in the **accounts** table.",
              "instructor_notes": ""
            },
            {
              "id": 558884,
              "key": "a804300d-0ae7-4719-8bd2-9a643dcf58d7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "b5df7459-3537-4552-9a29-48205e58693f",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 391999,
          "key": "f6cb57e3-8bca-4591-96fc-24bac9d33867",
          "title": "Solutions: WHERE with Non-Numeric",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f6cb57e3-8bca-4591-96fc-24bac9d33867",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392001,
              "key": "3872c970-92c4-48df-96e6-322b546623d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution from WHERE with Non-Numeric Data\n\n1. \n```\nSELECT name, website, primary_poc\nFROM accounts\nWHERE name = 'Exxon Mobil';\n```\n\n**Note:** If you received an error message when executing your query, remember that SQL requires single-quotes, not double-quotes, around text values like 'Exxon Mobil.'",
              "instructor_notes": ""
            },
            {
              "id": 558885,
              "key": "91487d31-b59e-4cad-80e1-c99d5fd86ea9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "ca7a2fc2-c13f-4a4c-92a7-d4c38798323f",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303914,
          "key": "6b161c1e-c518-46b2-93a3-202a82fe7a3a",
          "title": "Video: Arithmetic Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6b161c1e-c518-46b2-93a3-202a82fe7a3a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394602,
              "key": "c3e4fde3-160f-4568-8e6b-2259a4c0ff29",
              "title": "Arithmetic Operators",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fgcJdiNECxI",
                "china_cdn_id": "fgcJdiNECxI.mp4"
              }
            },
            {
              "id": 394567,
              "key": "0d4399d7-5116-4b12-bdc7-d90d07944088",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Derived Columns\n\nCreating a new column that is a combination of existing columns is known as a **derived** column (or \"calculated\" or \"computed\" column). Usually you want to give a name, or \"alias,\" to your new column using the **AS** keyword.\n\nThis derived column, and its alias, are generally only temporary, existing just for the duration of your query. The next time you run a query and access this table, the new column will not be there.\n\nIf you are deriving the new column from existing columns using a mathematical expression, then these familiar mathematical operators will be useful:\n\n1. `*` (Multiplication)\n2. `+` (Addition)\n3. `-` (Subtraction)\n4. `/` (Division)\n\nConsider this example:\n```\nSELECT id, (standard_amt_usd/total_amt_usd)*100 AS std_percent, total_amt_usd\nFROM orders\nLIMIT 10;\n```\nHere we divide the standard paper dollar amount by the total order amount to find the standard paper percent for the order, and use the **AS** keyword to name this new column \"std_percent.\" You can run this query on the next page if you'd like, to see the output.\n\n## Order of Operations\nRemember PEMDAS from math class to help remember the order of operations? If not, check out this [link](http://www.purplemath.com/modules/orderops.htm) as a reminder.  The same order of operations applies when using arithmetic operators in SQL. \n\nThe following two statements have very different end results:\n1. **Standard_qty / standard_qty + gloss_qty + poster_qty** \n2. **standard_qty / (standard_qty + gloss_qty + poster_qty)**\n\nIt is likely that you mean to do the calculation as written in statement number 2!\n",
              "instructor_notes": ""
            },
            {
              "id": 790752,
              "key": "8c0464f2-7ac9-4492-9e3c-0d59574aa3e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392002,
          "key": "07dc6709-953d-41c2-98d2-f630044c0767",
          "title": "Quiz: Arithmetic Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "07dc6709-953d-41c2-98d2-f630044c0767",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392003,
              "key": "16dd5c96-5c79-46d1-b666-d844fbe19ed7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Questions using Arithmetic Operations\n\nUsing the **orders** table:\n\n1. Create a column that divides the `standard_amt_usd` by the `standard_qty` to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the `id` and `account_id` fields.  <br><br>  \n\n2. Write a query that finds the percentage of revenue that comes from poster paper for each order.  You will need to use only the columns that end with `_usd`.  (Try to do this without using the `total` column.) Display the `id` and `account_id` fields also.\n **NOTE - you will receive an error with the correct solution to this question.  This occurs because at least one of the values in the data creates a division by zero in your formula.  You will learn later in the course how to fully handle this issue. For now, you can just limit your calculations to the first 10 orders, as we did in question #1, and you'll avoid that set of data that causes the problem.** <br><br>\n\nNotice, the above operators combine information across columns for the same row.  If you want to combine values of a particular column, across multiple rows, we will do this with aggregations.  We will get to that before the end of the course!",
              "instructor_notes": ""
            },
            {
              "id": 558887,
              "key": "085afed5-88df-4864-8a27-4d3bd518fa10",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "334b3961-3645-49e4-8b6d-87aa53e41e8c",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392006,
          "key": "ae07614d-476c-473e-81cc-14f4f524affa",
          "title": "Solutions: Arithmetic Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae07614d-476c-473e-81cc-14f4f524affa",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392007,
              "key": "5b61f0a3-e51d-4ce7-aee2-0a400bda3e57",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solutions to Arithmetic Operator Questions\n\n1.  \n```\nSELECT id, account_id, standard_amt_usd/standard_qty AS unit_price\nFROM orders\nLIMIT 10;\n```\n\n2.  \n```\nSELECT id, account_id, \n       poster_amt_usd/(standard_amt_usd + gloss_amt_usd + poster_amt_usd) AS post_per\nFROM orders\nLIMIT 10;\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 558888,
              "key": "d1a499e9-2e09-4176-beda-fa281848a368",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "7dfdbf1f-5b9e-4b50-a62a-d549d6df3634",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303821,
          "key": "11449e46-31d8-4463-a3b9-2f562d3a5d18",
          "title": "Text: Introduction to Logical Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "11449e46-31d8-4463-a3b9-2f562d3a5d18",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394060,
              "key": "852899ca-9522-40d5-bb9d-4c45bcf05406",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Introduction to Logical Operators\n\nIn the next concepts, you will be learning about **Logical Operators**. **Logical Operators** include:\n\n1. **LIKE**\nThis allows you to perform operations similar to using **WHERE** and `=`, but for cases when you might **not** know **exactly** what you are looking for.\n\n\n1. **IN**\nThis allows you to perform operations similar to using **WHERE** and `=`, but for more than one condition.\n\n\n1. **NOT**\nThis is used with **IN** and **LIKE** to select all of the rows **NOT LIKE** or **NOT IN**\na certain condition.\n\n\n1. **AND & BETWEEN**\nThese allow you to combine operations where all combined conditions must be true.\n\n\n1. **OR**\nThis allows you to combine operations where at least one of the combined conditions must be true.\n\n\n\n<hr>\n\nDon't worry if this doesn't make total sense right now.  You will get practice with each in the next sections.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 303820,
          "key": "f2d0f9c9-b2d0-4472-a349-4e2b52243288",
          "title": "Video: LIKE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f2d0f9c9-b2d0-4472-a349-4e2b52243288",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394603,
              "key": "4dce1f6f-2168-4302-a65d-84996805104d",
              "title": "LIKE Operator",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "O5z6eWkNip4",
                "china_cdn_id": "O5z6eWkNip4.mp4"
              }
            },
            {
              "id": 338002,
              "key": "4a40c8a4-16f4-44d9-b0c3-23d5d7f67463",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **LIKE** operator is extremely useful for working with text.  You will use **LIKE** within a **WHERE** clause.  The **LIKE** operator is frequently used with `%`.  The `%` tells us that we might want any number of characters leading up to a particular set of characters or following a certain set of characters, as we saw with the **google** syntax above.  Remember you will need to use single quotes for the text you pass to the **LIKE** operator, because of this lower and uppercase letters are not the same within the string.  Searching for **'T'** is not the same as searching for **'t'**.  In other SQL environments (outside the classroom), you can use either single or double quotes.\n\nHopefully you are starting to get more comfortable with SQL, as we are starting to move toward operations that have more applications, but this also means we can't show you every use case.  Hopefully, you can start to think about how you might use these types of applications to identify phone numbers from a certain region, or an individual where you can't quite remember the full name.  \n\n",
              "instructor_notes": ""
            },
            {
              "id": 790753,
              "key": "2cb534b4-150f-49d7-af18-6111d284ae27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392012,
          "key": "8c6100c8-ab81-4c32-9fc8-5e5b3f46d97c",
          "title": "Quiz: LIKE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8c6100c8-ab81-4c32-9fc8-5e5b3f46d97c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392013,
              "key": "53db500a-4575-4716-a838-111bc20878d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Questions using the LIKE operator\n\nUse the **accounts** table to find\n\n1.  All the companies whose names start with 'C'. <br><br>\n2.  All companies whose names contain the string 'one' somewhere in the name.<br><br>\n3.  All companies whose names end with 's'.",
              "instructor_notes": ""
            },
            {
              "id": 558889,
              "key": "731ebd0d-60f4-4c8d-9493-10022d7a7f50",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "79e99345-cbbb-4143-b060-d70371bfb302",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392016,
          "key": "eb997e49-d502-4317-8b16-677266e46f90",
          "title": "Solutions: LIKE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eb997e49-d502-4317-8b16-677266e46f90",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392017,
              "key": "684e78a8-3181-4921-ba93-c06ddd4271d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solutions for LIKE operator\n\n1. \n```\nSELECT name\nFROM accounts\nWHERE name LIKE 'C%';\n```\n\n2. \n```\nSELECT name\nFROM accounts\nWHERE name LIKE '%one%';\n```\n\n3. \n```\nSELECT name\nFROM accounts\nWHERE name LIKE '%s';\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 558890,
              "key": "92d6efba-27da-46af-9f30-7a96cfafa3d1",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "de69caaf-74a7-46f5-be9a-f2d93fe2f123",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303822,
          "key": "f852a211-dc8b-4090-aa02-f59473a905c2",
          "title": "Video: IN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f852a211-dc8b-4090-aa02-f59473a905c2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394535,
              "key": "1e2968d5-49b3-44c8-82a3-7dd21da3503b",
              "title": "IN Operator",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_JPO7wwX3uA",
                "china_cdn_id": "_JPO7wwX3uA.mp4"
              }
            },
            {
              "id": 338005,
              "key": "c9df9682-af3f-469d-98aa-7c52e0eea4b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **IN** operator is useful for working with both numeric and text columns.  This operator allows you to use an `=`, but for more than one item of that particular column.  We can check one, two or many column values for which we want to pull data, but all within the same query.  In the upcoming concepts, you will see the **OR** operator that would also allow us to perform these tasks, but the **IN** operator is a cleaner way to write these queries.  \n\n### Expert Tip\n\nIn most SQL environments, although not in our Udacity's classroom, you can use single or double quotation marks - and you may NEED to use double quotation marks if you have an apostrophe within the text you are attempting to pull.\n\nIn our Udacity SQL workspaces, note you can include an apostrophe by putting two single quotes together. For example, Macy's in our workspace would be 'Macy''s'.",
              "instructor_notes": ""
            },
            {
              "id": 790754,
              "key": "754a07e9-d6f9-40cc-8723-9245b17eed9c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392018,
          "key": "c28f9da7-40e3-4e7b-a91f-ee6a57443cf6",
          "title": "Quiz: IN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c28f9da7-40e3-4e7b-a91f-ee6a57443cf6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392019,
              "key": "fe9b0b16-233c-4580-8451-eb0456479d2a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n# Questions using IN operator\n\n1. Use the **accounts** table to find the account `name`, ` primary_poc`, and `sales_rep_id` for Walmart, Target, and Nordstrom.<br><br>\n\n2. Use the **web_events** table to find all information regarding individuals who were contacted via the **channel** of `organic` or `adwords`.",
              "instructor_notes": ""
            },
            {
              "id": 558891,
              "key": "aa0e3529-216e-4faf-b8eb-5e7f51a334cf",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "85d474f2-8302-4941-aacf-4c7964673f4c",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392021,
          "key": "591d0ad2-470c-4195-8ca1-3c41ab341ea9",
          "title": "Solutions: IN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "591d0ad2-470c-4195-8ca1-3c41ab341ea9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392022,
              "key": "f3fd7d3c-54ae-40a9-8fbb-9c28f23e3a38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solutions to IN Questions\n\n1. \n```\nSELECT name, primary_poc, sales_rep_id\nFROM accounts\nWHERE name IN ('Walmart', 'Target', 'Nordstrom');\n```\n\n2. \n```\nSELECT *\nFROM web_events\nWHERE channel IN ('organic', 'adwords');\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 558892,
              "key": "d5e76ffe-742a-4ac8-a1d2-374029bbdd47",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "206e0aca-3b2b-4ba3-a096-e0ee2c42aa2d",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303823,
          "key": "36a1c4bb-10d6-401c-8c7e-d5141f549891",
          "title": "Video: NOT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "36a1c4bb-10d6-401c-8c7e-d5141f549891",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394540,
              "key": "979e7964-c26f-44d1-a254-3aa8524992d2",
              "title": "NOT Operator",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dSQF87oW8a0",
                "china_cdn_id": "dSQF87oW8a0.mp4"
              }
            },
            {
              "id": 308962,
              "key": "0908b282-e51c-4799-ba86-e643e52564a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **NOT** operator is an extremely useful operator for working with the previous two operators we introduced: **IN** and **LIKE**.  By specifying **NOT LIKE** or **NOT IN**, we can grab all of the rows that do not meet a particular criteria.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 790755,
              "key": "988bb611-c96a-4680-81c0-a74f296bfd61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392023,
          "key": "7a401a69-4c73-48b3-ad11-96024e1bc4e3",
          "title": "Quiz: NOT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7a401a69-4c73-48b3-ad11-96024e1bc4e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392024,
              "key": "8b7ec604-5fe6-42aa-a6f3-44caa485c21b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Questions using the NOT operator\n\nWe can pull all of the rows that were excluded from the queries in the previous two concepts with our new operator.  \n\n1. Use the **accounts** table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom.<br><br>\n2. Use the **web_events** table to find all information regarding individuals who were contacted via any method except  using `organic` or `adwords` methods.\n\nUse the **accounts** table to find:\n\n1.  All the companies whose names do not start with 'C'.<br><br>\n2. All companies whose names do not contain the string 'one' somewhere in the name.<br><br>\n3. All companies whose names do not end with 's'.",
              "instructor_notes": ""
            },
            {
              "id": 558893,
              "key": "a47bb67b-cafc-41c5-8637-54f370cc7f2d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "ebcea587-0f90-429f-a85b-6382339333f6",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392025,
          "key": "997b289c-f042-4e2e-9b0f-12c723537afb",
          "title": "Solutions: NOT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "997b289c-f042-4e2e-9b0f-12c723537afb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392026,
              "key": "e89b3441-233c-41a7-90b3-a35b9ac05faa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solutions to NOT IN Questions\n\n1. \n```\nSELECT name, primary_poc, sales_rep_id\nFROM accounts\nWHERE name NOT IN ('Walmart', 'Target', 'Nordstrom');\n```\n2. \n```\nSELECT *\nFROM web_events\nWHERE channel NOT IN ('organic', 'adwords');\n```\n\n# Solutions to NOT LIKE Questions\n\n1. \n```\nSELECT name\nFROM accounts\nWHERE name NOT LIKE 'C%';\n```\n\n2. \n```\nSELECT name\nFROM accounts\nWHERE name NOT LIKE '%one%';\n```\n\n3. \n```\nSELECT name\nFROM accounts\nWHERE name NOT LIKE '%s';\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 558894,
              "key": "b6d0f2d8-4d4d-4487-923d-6c5c485fa166",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "485a937a-4805-4959-94f1-8529ab9fb914",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303824,
          "key": "32dabf6d-7b56-4f7a-bb7e-9572aec9d45b",
          "title": "Video: AND and BETWEEN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "32dabf6d-7b56-4f7a-bb7e-9572aec9d45b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394538,
              "key": "70d31a96-8c95-47d8-86f1-6b9877213a8a",
              "title": "AND & BETWEEN Operators",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nBuDPneWcKY",
                "china_cdn_id": "nBuDPneWcKY.mp4"
              }
            },
            {
              "id": 338020,
              "key": "0edea685-39b4-472c-a5a2-8bae6f340540",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **AND** operator is used within a **WHERE** statement to consider more than one logical clause at a time.  Each time you link a new statement with an **AND**, you will need to specify the column you are interested in looking at.  You may link as many statements as you would like to consider at the same time.  This operator works with all of the operations we have seen so far including arithmetic operators (`+`, `*`, `-`, `/`). **LIKE**, **IN**, and **NOT** logic can also be linked together using the **AND** operator.\n\n# BETWEEN Operator\n\nSometimes we can make a cleaner statement using **BETWEEN** than we can using **AND**.  Particularly this is true when we are using the same column for different parts of our **AND** statement.  In the previous video, we probably should have used **BETWEEN**.\n\n Instead of writing :\n```\nWHERE column >= 6 AND column <= 10\n```\nwe can instead write, equivalently:\n```\nWHERE column BETWEEN 6 AND 10\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 790756,
              "key": "ce413f61-45c3-4c50-a990-f8a1121ec0cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392027,
          "key": "91b5b832-e513-49d9-8966-d7b26208249e",
          "title": "Quiz: AND and BETWEEN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "91b5b832-e513-49d9-8966-d7b26208249e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392028,
              "key": "134a6729-503e-4cac-bef0-cc953768a4f8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Questions using AND and BETWEEN operators\n\n1.  Write a query that returns all the **orders** where the `standard_qty` is over 1000, the `poster_qty` is 0, and the `gloss_qty` is 0.<br><br>\n2.  Using the **accounts** table, find all the companies whose names do not start with 'C' and end with 's'.<br><br>\n3.  When you use the BETWEEN operator in SQL, do the results include the values of your endpoints, or not? Figure out the answer to this important question by writing a query that displays the order date and `gloss_qty` data for all **orders** where gloss_qty is between 24 and 29. Then look at your output to see if the BETWEEN operator included the begin and end values or not.<br><br>\n4. Use the **web_events** table to find all information regarding individuals who were contacted via the `organic` or `adwords` channels, and started their account at any point in 2016, sorted from newest to oldest.<br><br>",
              "instructor_notes": ""
            },
            {
              "id": 558895,
              "key": "82eb6fbe-6c62-4c52-99a8-fcf0d45aeb04",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "3ad22108-cfc1-46c2-8e5d-792a460cfc74",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392029,
          "key": "3ee697bd-b908-44c8-9f7e-69c1b6324ad6",
          "title": "Solutions: AND and BETWEEN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3ee697bd-b908-44c8-9f7e-69c1b6324ad6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392030,
              "key": "776e501d-204e-4539-b61d-b7da103c2be9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solutions to AND and BETWEEN Questions\n\n1.  Write a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0.\n```\nSELECT *\nFROM orders\nWHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0;\n```\n2. Using the **accounts** table, find all the companies whose names do not start with 'C' and end with 's'.\n```\nSELECT name\nFROM accounts\nWHERE name NOT LIKE 'C%' AND name LIKE '%s';\n```\n3.  When you use the BETWEEN operator in SQL, do the results include the values of your endpoints, or not? Figure out the answer to this important question by writing a query that displays the order date and `gloss_qty` data for all orders where gloss_qty is between 24 and 29. Then look at your output to see if the BETWEEN operator included the begin and end values or not.\n```\nSELECT occurred_at, gloss_qty \nFROM orders\nWHERE gloss_qty BETWEEN 24 AND 29;\n```\n**You should notice that there are a number of rows in the output of this query where the `gloss_qty` values are 24 or 29. So the answer to the question is that yes, the BETWEEN operator in SQL is inclusive; that is, the endpoint values are included. So the BETWEEN statement in this query is equivalent to having written \"WHERE gloss_qty >= 24 AND gloss_qty <= 29.\"**<br><br>\n4.  You will notice that using **BETWEEN** is tricky for dates! While **BETWEEN** is generally inclusive of endpoints, it assumes the time is at 00:00:00 (i.e. midnight) for dates. This is the reason why we set the right-side endpoint of the period at '2017-01-01'.\n```\nSELECT *\nFROM web_events\nWHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'\nORDER BY occurred_at DESC;\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 558896,
              "key": "1073438a-456b-422b-a7be-d459c4a0b09c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "378aba65-1f39-46c9-8878-caca5a421863",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 303825,
          "key": "6d684ff8-98a0-427a-ad7d-2a5666a457c7",
          "title": "Video: OR",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6d684ff8-98a0-427a-ad7d-2a5666a457c7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 354254,
              "key": "50bae6e3-1d07-4b1a-be5f-9e307450d063",
              "title": "OR Operator",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3vLGEuXAAvA",
                "china_cdn_id": "3vLGEuXAAvA.mp4"
              }
            },
            {
              "id": 355143,
              "key": "98504758-43bc-4a34-afc6-ec7f46627855",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Similar to the **AND** operator, the **OR** operator can combine multiple statements.   Each time you link a new statement with an **OR**, you will need to specify the column you are interested in looking at.  You may link as many statements as you would like to consider at the same time.  This operator works with all of the operations we have seen so far including arithmetic operators (`+`, `*`, `-`, `/`), **LIKE**, **IN**, **NOT**, **AND**, and **BETWEEN** logic can all be linked together using the **OR** operator.\n\nWhen combining multiple of these operations, we frequently might need to use parentheses to assure that logic we want to perform is being executed correctly.  The video below shows an example of one of these situations.",
              "instructor_notes": ""
            },
            {
              "id": 394537,
              "key": "ad5223ba-2896-4c75-ae83-69e6275a3e52",
              "title": "OR Statement",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DRmkKVhe6-s",
                "china_cdn_id": "DRmkKVhe6-s.mp4"
              }
            }
          ]
        },
        {
          "id": 392031,
          "key": "59538de0-8405-46de-bede-d8f42c9541e2",
          "title": "Quiz: OR",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59538de0-8405-46de-bede-d8f42c9541e2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 392032,
              "key": "8103595c-1040-402f-ba80-1ae76bab1518",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Questions using the OR operator\n\n1. Find list of **orders** ids where either `gloss_qty` or `poster_qty` is greater than 4000. Only include the `id` field in the resulting table.<br><br>\n\n2. Write a query that returns a list of **orders** where the `standard_qty` is zero and either the `gloss_qty` or `poster_qty` is over 1000.<br><br>\n\n3. Find all the company names that start with a 'C' or 'W', and the primary contact **contains** 'ana' or 'Ana', but it doesn't contain 'eana'.<br><br>",
              "instructor_notes": ""
            },
            {
              "id": 558897,
              "key": "43fbe3ab-4bbf-4c02-a688-a815b6d4f6ed",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "245c5748-818a-4cbd-ba59-51c1988009f4",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 355140,
          "key": "0a61bc15-f011-42d8-9ed0-2d1ff302f805",
          "title": "Solutions: OR",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0a61bc15-f011-42d8-9ed0-2d1ff302f805",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 355200,
              "key": "5d16afc8-fe6d-48c8-9140-6e217cb75808",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solutions to OR Questions\n\n1. \n```\nSELECT id\nFROM orders\nWHERE gloss_qty > 4000 OR poster_qty > 4000;\n```\n2. \n```\nSELECT *\nFROM orders\nWHERE standard_qty = 0 AND (gloss_qty > 1000 OR poster_qty > 1000);\n```\n3. \n```\nSELECT *\nFROM accounts\nWHERE (name LIKE 'C%' OR name LIKE 'W%') \n              AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%') \n              AND primary_poc NOT LIKE '%eana%');\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 558898,
              "key": "7a7b300f-1c6d-403e-a7d0-910e52dcd69b",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9bc04d90",
              "pool_id": "sqlwidget",
              "view_id": "cc07d11d-635c-4fa5-ba07-f35db08c8bd8",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 369110,
          "key": "06385246-8882-42d4-9994-b898e2a18ad8",
          "title": "Text: Recap & Looking Ahead",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "06385246-8882-42d4-9994-b898e2a18ad8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 369111,
              "key": "ae6e5511-7dcd-4ef3-b3e9-c450926a2bd4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recap\n\n### Commands\n\nYou have already learned a lot about writing code in SQL!  Let's take a moment to recap all that we have covered before moving on:\n\n\n\n|**Statement**   | **How to Use It**  | **Other Details**|\n|---|---|---|\n|   SELECT| SELECT **Col1**, **Col2**, ...  | Provide the columns you want |\n|   FROM |  FROM **Table** | Provide the table where the columns exist\n|  LIMIT | LIMIT **10 **   | Limits based number of rows returned\n| ORDER BY  | ORDER BY **Col**  | Orders table based on the column.  Used with **DESC**.\n| WHERE  | WHERE **Col > 5**  | A conditional statement to filter your results \n| LIKE  | WHERE **Col LIKE '%me%'**  | Only pulls rows where column has 'me' within the text \n| IN  | WHERE **Col IN ('Y', 'N')**  | A filter for only rows with column of 'Y' or 'N'\n| NOT  | WHERE **Col NOT IN ('Y', 'N')**  | **NOT** is frequently used with **LIKE** and **IN**\n| AND | WHERE **Col1 > 5 AND Col2 < 3 **  | Filter rows where two or more conditions must be true \n| OR  | WHERE **Col1 > 5 OR Col2 < 3**  | Filter rows where at least one condition must be true\n| BETWEEN | WHERE **Col BETWEEN 3 AND 5**  | Often easier syntax than using an **AND**\n\n### Other Tips\n\nThough SQL is **not case sensitive** (it doesn't care if you write your statements as all uppercase or lowercase), we discussed some best practices.  **The order of the key words does matter!**  Using what you know so far, you will want to write your statements as:\n\n```\nSELECT col1, col2\nFROM table1\nWHERE col3  > 5 AND col4 LIKE '%os%'\nORDER BY col5\nLIMIT 10;\n```\n\nNotice, you can retrieve different columns than those being used in the **ORDER BY** and **WHERE** statements.  Assuming all of these column names existed in this way (`col1`, `col2`, `col3`, `col4`, `col5`) within a table called `table1`, this query would run just fine.\n\n\n# Looking Ahead\n\nIn the next lesson, you will be learning about **JOIN**s.  This is the real secret (well not really a secret) behind the success of SQL as a language.  **JOIN**s allow us to combine multiple tables together.  All of the operations we learned here will still be important moving forward, but we will be able to answer much more complex questions by combining information from multiple tables!   You have already mastered so much - potentially writing your first code ever, but it is about to get so much better!",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    }
  ]
}