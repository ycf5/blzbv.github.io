{
  "data": {
    "lesson": {
      "id": 419681,
      "key": "03f64082-fa4d-4aff-80be-d48597867e07",
      "title": "SQL Data Cleaning",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Cleaning data is an important part of the data analysis process.  You will be learning how to perform data cleaning using SQL in this lesson.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/03f64082-fa4d-4aff-80be-d48597867e07/419681/1517079777680/SQL%20Data%20Cleaning%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/03f64082-fa4d-4aff-80be-d48597867e07/419681/1517079764641/SQL%20Data%20Cleaning%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 392087,
          "key": "d529924c-52ba-4a54-821d-549ba998272a",
          "title": "Video: Introduction to SQL Data Cleaning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d529924c-52ba-4a54-821d-549ba998272a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 406814,
              "key": "5e89db5b-a41a-4f25-86f2-b4910f353234",
              "title": "Introduction to Data Cleaning",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YTtH3NM2BX0",
                "china_cdn_id": "YTtH3NM2BX0.mp4"
              }
            },
            {
              "id": 413005,
              "key": "7431f068-782e-4fa5-80b1-d5c9c34c9527",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nIn this lesson, you will be learning a number of techniques to \n\n1. Clean and re-structure messy data.\n2. Convert columns to different data types.\n3. Tricks for manipulating **NULL**s.\n\nThis will give you a robust toolkit to get from raw data to clean data that's useful for analysis.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392089,
          "key": "51478407-aac0-4d29-9c4f-d0ae3a527ab7",
          "title": "Video: LEFT & RIGHT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "51478407-aac0-4d29-9c4f-d0ae3a527ab7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 430217,
              "key": "c18d23b3-9907-48f9-b55e-e399b059ac8e",
              "title": "Cleaning with String Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "y1fduSu7Ovc",
                "china_cdn_id": "y1fduSu7Ovc.mp4"
              }
            },
            {
              "id": 413023,
              "key": "5bb42aa7-f6c0-4856-9c1b-37587c2c301c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here we looked at three new functions:\n\n1. **LEFT**\n2. **RIGHT**\n3. **LENGTH**\n\n**LEFT** pulls a specified number of characters for each row in a specified column starting at the beginning (or from the left).  As you saw here, you can pull the first three digits of a phone number using **LEFT(phone_number, 3)**.<br><br>\n\n**RIGHT** pulls a specified number of characters for each row in a specified column starting at the end (or from the right).  As you saw here, you can pull the last eight digits of a phone number using **RIGHT(phone_number, 8)**.<br><br>\n\n**LENGTH** provides the number of characters for each row of a specified column.  Here, you saw that we could use this to get the length of each phone number as **LENGTH(phone_number)**.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392088,
          "key": "1f7e117b-0bd8-4a98-a3fb-2449e0b77d90",
          "title": "Quiz: LEFT & RIGHT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f7e117b-0bd8-4a98-a3fb-2449e0b77d90",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403176,
              "key": "4cb4a25d-1e42-4a0f-91a4-577bc65e27e8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### LEFT & RIGHT Quizzes\n\n1. In the **accounts** table, there is a column holding the **website** for each company.  The last three digits specify what type of web address they are using.  A list of extensions (and pricing) is provided [here](https://iwantmyname.com/domains/domain-name-registration-list-of-extensions).  Pull these extensions and provide how many of each website type exist in the **accounts** table.<br><br>\n\n2. There is much debate about how much the name [(or even the first letter of a company name)](https://www.quora.com/Does-a-companys-name-matter) matters.  Use the **accounts** table to pull the first letter of each company name to see the distribution of company names that begin with each letter (or number).  <br><br>\n\n3. Use the **accounts** table and a **CASE** statement to create two groups: one group of company names that start with a number and a second group of those company names that start with a letter.  What proportion of company names start with a letter?<br><br>\n\n4. Consider vowels as `a`, `e`, `i`, `o`, and `u`.  What proportion of company names start with a vowel, and what percent start with anything else? ",
              "instructor_notes": ""
            },
            {
              "id": 403155,
              "key": "e6d1abe1-0d0a-44d4-a4e4-565b8842e781",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewee50805b",
              "pool_id": "sqlwidget",
              "view_id": "ee50805b-cfc4-4136-8bef-2f39d82eff83",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392090,
          "key": "9e01ea9f-1d9e-4ffd-be75-ba4535fe262a",
          "title": "Solutions: LEFT & RIGHT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9e01ea9f-1d9e-4ffd-be75-ba4535fe262a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 415716,
              "key": "f0b87c0b-80f3-4758-b902-24ea4a5c27d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### LEFT & RIGHT Solutions\n\n1. \n```\nSELECT RIGHT(website, 3) AS domain, COUNT(*) num_companies\nFROM accounts\nGROUP BY 1\nORDER BY 2 DESC;\n```\n2. \n```\nSELECT LEFT(UPPER(name), 1) AS first_letter, COUNT(*) num_companies\nFROM accounts\nGROUP BY 1\nORDER BY 2 DESC;\n```\n3. \nThere are 350 company names that start with a letter and 1 that starts with a number.  This gives a ratio of 350/351 that are company names that start with a letter or 99.7%.\n```\nSELECT SUM(num) nums, SUM(letter) letters\nFROM (SELECT name, CASE WHEN LEFT(UPPER(name), 1) IN ('0','1','2','3','4','5','6','7','8','9') \n                          THEN 1 ELSE 0 END AS num, \n            CASE WHEN LEFT(UPPER(name), 1) IN ('0','1','2','3','4','5','6','7','8','9') \n                          THEN 0 ELSE 1 END AS letter\n         FROM accounts) t1;\n```\n4. There are 80 company names that start with a vowel and 271 that start with other characters.  Therefore 80/351 are vowels or 22.8%.  Therefore, 77.2% of company names do not start with vowels.\n```\nSELECT SUM(vowels) vowels, SUM(other) other\nFROM (SELECT name, CASE WHEN LEFT(UPPER(name), 1) IN ('A','E','I','O','U') \n                           THEN 1 ELSE 0 END AS vowels, \n             CASE WHEN LEFT(UPPER(name), 1) IN ('A','E','I','O','U') \n                          THEN 0 ELSE 1 END AS other\n            FROM accounts) t1;\n```",
              "instructor_notes": ""
            },
            {
              "id": 558941,
              "key": "502cd02f-dd0a-428e-8fc2-d6035e623d21",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewee50805b",
              "pool_id": "sqlwidget",
              "view_id": "33c0c0c8-6ca1-49ae-9b56-6b1418d56562",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392133,
          "key": "eae3fb73-0218-46e8-b7f2-03b805acfb16",
          "title": "Video: POSITION, STRPOS, & SUBSTR",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eae3fb73-0218-46e8-b7f2-03b805acfb16",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 430215,
              "key": "e0647bec-55f3-44d3-a695-1ffe44da559c",
              "title": "Cleaning With More Advanced String Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "E6cK8RbYGEc",
                "china_cdn_id": "E6cK8RbYGEc.mp4"
              }
            },
            {
              "id": 413039,
              "key": "52603ebe-4f2b-442e-b3cc-9f4488f40549",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this lesson, you learned about:\n\n1. **POSITION**\n2. **STRPOS**\n3. **LOWER**\n4. **UPPER**\n\n\n**POSITION** takes a character and a column, and provides the index where that character is for each row.  The index of the first position is 1 in SQL.  If you come from another programming language, many begin indexing at 0.  Here, you saw that you can pull the index of a comma as **POSITION(',' IN city_state)**.<br><br>\n\n**STRPOS** provides the same result as **POSITION**, but the syntax for achieving those results is a bit different as shown here: **STRPOS(city_state, ',')**.<br><br>\n\nNote, both **POSITION** and **STRPOS** are case sensitive, so looking for **A** is different than looking for **a**.  <br><br>\n\nTherefore, if you want to pull an index regardless of the case of a letter, you might want to use **LOWER** or **UPPER** to make all of the characters lower or uppercase.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392125,
          "key": "6b3baec6-5b43-4508-83f8-037cfadfea19",
          "title": "Quiz: POSITION, STRPOS,  & SUBSTR - AME DATA AS QUIZ 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6b3baec6-5b43-4508-83f8-037cfadfea19",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403870,
              "key": "746ae3a9-8afa-481c-b9fc-080fb25750ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quizzes POSITION & STRPOS\n\nYou will need to use what you have learned about **LEFT** & **RIGHT**, as well as what you know about **POSITION** or **STRPOS** to do the following quizzes.\n\n1. Use the `accounts` table to create **first** and **last** name columns that hold the first and last names for the `primary_poc`.  <br><br>\n\n2. Now see if you can do the same thing for every rep `name` in the `sales_reps` table.  Again provide **first** and **last** name columns.",
              "instructor_notes": ""
            },
            {
              "id": 558942,
              "key": "84a8ba82-2f88-4146-b36d-7cd66790bbf2",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewee50805b",
              "pool_id": "sqlwidget",
              "view_id": "e81b185e-cfe6-47e9-89c6-bbf78f7e5ae6",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392127,
          "key": "7a46b04b-287c-4838-aae0-406c1aaee7e7",
          "title": "Solutions: POSITION, STRPOS, & SUBSTR",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7a46b04b-287c-4838-aae0-406c1aaee7e7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 415717,
              "key": "2f868d9c-ea9d-4f9e-9d4c-b8bfb3001719",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### POSITION, STRPOS, & SUBSTR Solutions\n\n1. \n```\nSELECT LEFT(primary_poc, STRPOS(primary_poc, ' ') -1 ) first_name, \n   RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name\nFROM accounts;\n```\n2. \n```\nSELECT LEFT(name, STRPOS(name, ' ') -1 ) first_name, \n          RIGHT(name, LENGTH(name) - STRPOS(name, ' ')) last_name\nFROM sales_reps;\n```",
              "instructor_notes": ""
            },
            {
              "id": 558943,
              "key": "48215bcc-2b5f-494b-b42c-19a5c3c0595a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewee50805b",
              "pool_id": "sqlwidget",
              "view_id": "08142410-f1b0-45d3-9115-62122b09f32e",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392132,
          "key": "4342e20d-0f4a-4243-8fdf-7d298fa3a59d",
          "title": "Video: CONCAT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4342e20d-0f4a-4243-8fdf-7d298fa3a59d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 430209,
              "key": "4d6d55f7-0883-45b9-90b0-d4aa356017d8",
              "title": "CONCAT",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bCxZnQN28Y4",
                "china_cdn_id": "bCxZnQN28Y4.mp4"
              }
            },
            {
              "id": 413087,
              "key": "77c344e0-2527-4c6d-93c7-08fc8a4c34b4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this lesson you learned about:\n\n1.  **CONCAT**\n2. Piping `||`\n\nEach of these will allow you to combine columns together across rows.  In this video, you saw how first and last names stored in separate columns could be combined together to create a full name: **CONCAT(first_name, ' ', last_name)** or with piping as **first_name || ' ' || last_name**.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 413089,
          "key": "bac53ed0-416a-4baf-b8e8-fbc5228ca992",
          "title": "Quiz: CONCAT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bac53ed0-416a-4baf-b8e8-fbc5228ca992",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 413090,
              "key": "9220eaad-6c98-4b59-a5f7-73d6815c3aef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quizzes CONCAT\n\n1. Each company in the `accounts` table wants to create an email address for each `primary_poc`.  The email address should be the first name of the **primary_poc** `.` last name **primary_poc** `@` company name `.com`.<br><br>\n\n2.  You may have noticed that in the previous solution some of the company names include spaces, which will certainly not work in an email address.  See if you can create an email address that will work by removing all of the spaces in the account `name`, but otherwise your solution should be just as in question `1`.  Some helpful documentation is [here](https://www.postgresql.org/docs/8.1/static/functions-string.html).<br><br>\n\n3. We would also like to create an initial password, which they will change after their first log in.  The first password will be the first letter of the `primary_poc`'s first name (lowercase), then the last letter of their first name (lowercase), the first letter of their last name (lowercase), the last letter of their last name (lowercase), the number of letters in their first name, the number of letters in their last name, and then the name of the company they are working with, all capitalized with no spaces. \n",
              "instructor_notes": ""
            },
            {
              "id": 558944,
              "key": "0ac7abdc-a74b-4a3f-9f64-a77a0e9690e5",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewee50805b",
              "pool_id": "sqlwidget",
              "view_id": "91fd04d8-1e5c-497f-b4ff-7e356d8b711f",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392134,
          "key": "97c82939-844d-4bd9-88c4-76d61d8289a1",
          "title": "Solutions: CONCAT",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "97c82939-844d-4bd9-88c4-76d61d8289a1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 415718,
              "key": "b4e44ea7-db41-4820-b230-5a5fc6720fe9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### CONCAT Solutions\n\n1. \n```\nWITH t1 AS (\n    SELECT LEFT(primary_poc,     STRPOS(primary_poc, ' ') -1 ) first_name,  RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, name\n    FROM accounts)\nSELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', name, '.com')\nFROM t1;\n```\n2. \n```\nWITH t1 AS (\n    SELECT LEFT(primary_poc,     STRPOS(primary_poc, ' ') -1 ) first_name,  RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, name\n    FROM accounts)\nSELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', REPLACE(name, ' ', ''), '.com')\nFROM  t1;\n```\n3. \n```\nWITH t1 AS (\n    SELECT LEFT(primary_poc,     STRPOS(primary_poc, ' ') -1 ) first_name,  RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, name\n    FROM accounts)\nSELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', name, '.com'), LEFT(LOWER(first_name), 1) || RIGHT(LOWER(first_name), 1) || LEFT(LOWER(last_name), 1) || RIGHT(LOWER(last_name), 1) || LENGTH(first_name) || LENGTH(last_name) || REPLACE(UPPER(name), ' ', '')\nFROM t1;\n```",
              "instructor_notes": ""
            },
            {
              "id": 558945,
              "key": "ac73739a-b05c-4992-8ef2-5198457ee1be",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewee50805b",
              "pool_id": "sqlwidget",
              "view_id": "7b0edb2e-e88a-431b-9cfb-66bddc7bd06a",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392091,
          "key": "c3338459-f5b0-455c-8a3e-163888041874",
          "title": "Video: CAST",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c3338459-f5b0-455c-8a3e-163888041874",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 430208,
              "key": "4660520e-f0cb-4cd8-be97-20e27bd2666a",
              "title": "CAST",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LbyOq4ofLng",
                "china_cdn_id": "LbyOq4ofLng.mp4"
              }
            },
            {
              "id": 392136,
              "key": "cf7c6a03-599a-4e32-aa31-1ecd876e5b31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this video, you saw additional functionality for working with dates including:\n\n1. **TO_DATE**\n2. **CAST**\n3. Casting with `::`\n\n**DATE_PART('month', TO_DATE(month, 'month'))** here changed a month name into the number associated with that particular month.<br><br>\n\nThen you can change a string to a date using **CAST**.  **CAST** is actually useful to change lots of column types.  Commonly you might be doing as you saw here, where you change a `string` to a `date` using **CAST(date_column AS DATE)**.  However, you might want to make other changes to your columns in terms of their data types.  You can see other examples [here](http://www.postgresqltutorial.com/postgresql-cast/).\n\nIn this example, you also saw that instead of **CAST(date_column AS DATE)**, you can use **date_column::DATE**.\n\n### Expert Tip\n\nMost of the functions presented in this lesson are specific to strings.  They won’t work with dates, integers or floating-point numbers. However, using any of these functions will automatically change the data to the appropriate type. \n\n**LEFT**, **RIGHT**, and **TRIM** are all used to select only certain elements of strings, but using them to select elements of a number or date will treat them as strings for the purpose of the function.  Though we didn't cover **TRIM** in this lesson explicitly, it can be used to remove characters from the beginning and end of a string.  This can remove unwanted spaces at the beginning or end of a row that often happen with data being moved from Excel or other storage systems.\n\nThere are a number of variations of these functions, as well as several other string functions not covered here. \n Different databases use subtle variations on these functions, so be sure to look up the appropriate database’s syntax if you’re connected to a private database.The [Postgres literature](http://www.postgresql.org/docs/9.1/static/functions-string.html) contains a lot of the related functions.\n\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392126,
          "key": "a9de2023-ae43-4781-a5c5-050bf5c33dd9",
          "title": "Quiz: CAST",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a9de2023-ae43-4781-a5c5-050bf5c33dd9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 413148,
              "key": "26e8f889-82b5-42e8-ac5b-ecedb6bd11cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### CAST Quizzes\n\nFor this set of quiz questions, you are going to be working with a single table in the environment below.  This is a different dataset than Parch & Posey, as all of the data in that particular dataset were already clean.  ",
              "instructor_notes": ""
            },
            {
              "id": 413183,
              "key": "15896644-c13e-4439-9e6d-35d1e632d843",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "15896644-c13e-4439-9e6d-35d1e632d843",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "`1.` Write a query to look at the top 10 rows to understand the columns and the raw data in the dataset called `sf_crime_data`.",
                "`2.` Remembering back to the lesson on dates, use the **Quiz Question** at the bottom of this page to make sure you remember the format that dates should use in SQL.",
                "`3.` Look at the `date` column in the **sf_crime_data** table.  Notice the date is not in the correct format.",
                "`4.` Write a query to change the date into the correct SQL date format. You will need to use at least **SUBSTR** and **CONCAT** to perform this operation.",
                "`5.` Once you have created a column in the correct format, use either `CAST` or `::` to convert this to a date."
              ],
              "positive_feedback": "Nice job!",
              "video_feedback": null,
              "description": "Tasks to complete:"
            },
            {
              "id": 806357,
              "key": "ea98ceb8-cdd7-4f0f-b1fe-99e2e67c24a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Note:** If the proper tables for this SF Crime Data database do not appear for some reason in the Schema below, you can fix this using the Menu in the lower left of the workspace. Make sure you have first saved any query you have entered, then click on Menu, then choose Reset Data, and type in \"Reset Data\" as directed. This will definitely bring up the proper schema tables for the SF Crime Data database.",
              "instructor_notes": ""
            },
            {
              "id": 403154,
              "key": "99a778e3-8cda-4aa2-93e8-a391836c08e2",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view8cce1eab",
              "pool_id": "sqlwidget",
              "view_id": "8cce1eab-c6d2-413a-a99a-72da58caf837",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 413184,
              "key": "04226d5f-2c47-4e89-a154-3df56364bbba",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "04226d5f-2c47-4e89-a154-3df56364bbba",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the correct format of dates in SQL?",
                "answers": [
                  {
                    "id": "a1506735519757",
                    "text": "dd-mm-yyyy",
                    "is_correct": false
                  },
                  {
                    "id": "a1506735545102",
                    "text": "mm-dd-yyyy",
                    "is_correct": false
                  },
                  {
                    "id": "a1506735553198",
                    "text": "yyyy-mm-dd",
                    "is_correct": true
                  },
                  {
                    "id": "a1506735561429",
                    "text": "yyyy-dd-mm",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 392093,
          "key": "6f365869-afd2-430f-8c30-7644d389aa56",
          "title": "Solutions: CAST",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6f365869-afd2-430f-8c30-7644d389aa56",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 413185,
              "key": "37110bf5-579c-41f2-9bdf-412b8aa330d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### CAST Solutions\n\n1. \n```\nSELECT *\nFROM sf_crime_data\nLIMIT 10;\n```\n2.  **yyyy-mm-dd**<br><br>\n3.  The format of the `date` column is **mm/dd/yyyy** with times that are not correct also at the end of the date.<br><br>\n4. \n```\nSELECT date orig_date, (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) || '-' || SUBSTR(date, 4, 2)) new_date\nFROM sf_crime_data;\n```\n5.  Notice, this new date can be operated on using **DATE_TRUNC** and **DATE_PART** in the same way as earlier lessons.\n```\nSELECT date orig_date, (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) || '-' || SUBSTR(date, 4, 2))::DATE new_date\nFROM sf_crime_data;\n```",
              "instructor_notes": ""
            },
            {
              "id": 558946,
              "key": "97fb0586-54c2-403c-8f59-ea14544879bb",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view8cce1eab",
              "pool_id": "sqlwidget",
              "view_id": "e1a6a9e2-2cad-4aaf-a1a1-ff2996bfc504",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392094,
          "key": "697bd996-0764-4e5f-9406-daefa67d266b",
          "title": "Video: COALESCE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "697bd996-0764-4e5f-9406-daefa67d266b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 430207,
              "key": "6b5c8620-8bc2-4ee7-b9c3-bae1db4cc8f3",
              "title": "COALESCE",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "86vgu-ECBCQ",
                "china_cdn_id": "86vgu-ECBCQ.mp4"
              }
            },
            {
              "id": 413186,
              "key": "9c6e41b0-58aa-4afc-94d9-db8e9a421632",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this video, you learned about how to use **COALESCE** to work with NULL values.  Unfortunately, our dataset does not have the **NULL** values that were fabricated in this dataset, so you will work through a different example in the next concept to get used to the **COALESCE** function.\n\n_____\n\nIn general, **COALESCE** returns the first non-NULL value passed for each row.  Hence why the video used **no_poc** if the value in the row was NULL.  \n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 392095,
          "key": "a97aeca2-634e-4dac-a5f1-2a91378797e8",
          "title": "Quiz: COALESCE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a97aeca2-634e-4dac-a5f1-2a91378797e8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 413187,
              "key": "3da5a7d6-da1e-4a5c-a35f-c291a708ef13",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### COALESCE Quizzes\n\nIn this quiz, we will walk through the previous example using the following task list. We will use the COALESCE function to complete the orders record for the row in the table output.",
              "instructor_notes": ""
            },
            {
              "id": 413194,
              "key": "380e5e1c-7cdd-4562-a351-e58b539281ef",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "380e5e1c-7cdd-4562-a351-e58b539281ef",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "`1.` Run the query entered below in the SQL workspace to notice the row with missing data.",
                "`2.` Use **COALESCE** to fill in the `accounts.id` column with the `account.id` for the NULL value for the table in `1`.",
                "`3.` Use **COALESCE** to fill in the `orders.account_id` column with the `account.id` for the NULL value for the table in `1`.",
                "`4.` Use **COALESCE** to fill in each of the **qty** and **usd** columns with 0 for the table in `1`.",
                "`5.`Run the query in `1` with the **WHERE** removed and **COUNT** the number of `id`s .",
                "`6.`Run the query in `5`, but with the **COALESCE** function used in questions `2` through `4`."
              ],
              "positive_feedback": "Nice job!  This one was really tricky.  Take a look at the solutions in the next concept to make sure you got them all!",
              "video_feedback": null,
              "description": "Tasks to complete:"
            },
            {
              "id": 662733,
              "key": "15ff968e-1522-4684-9b35-2123b954aa39",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewee50805b",
              "pool_id": "sqlwidget",
              "view_id": "6104a3ce-26a7-487a-a04a-e2288177e931",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392096,
          "key": "28351a6b-8d86-44a4-acb3-2356f3d884d4",
          "title": "Solutions: COALESCE",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "28351a6b-8d86-44a4-acb3-2356f3d884d4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 413200,
              "key": "1c66bb1e-49f2-46e2-a3eb-b286436a89b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### COALESCE Solutions\n\n1. \n```\nSELECT *\nFROM accounts a\nLEFT JOIN orders o\nON a.id = o.account_id\nWHERE o.total IS NULL; \n```\n2. \n```\nSELECT COALESCE(a.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, o.*\nFROM accounts a\nLEFT JOIN orders o\nON a.id = o.account_id\nWHERE o.total IS NULL;\n```\n3. \n```\nSELECT COALESCE(a.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, COALESCE(o.account_id, a.id) account_id, o.occurred_at, o.standard_qty, o.gloss_qty, o.poster_qty, o.total, o.standard_amt_usd, o.gloss_amt_usd, o.poster_amt_usd, o.total_amt_usd\nFROM accounts a\nLEFT JOIN orders o\nON a.id = o.account_id\nWHERE o.total IS NULL;\n```\n4. \n```\nSELECT COALESCE(a.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, COALESCE(o.account_id, a.id) account_id, o.occurred_at, COALESCE(o.standard_qty, 0) standard_qty, COALESCE(o.gloss_qty,0) gloss_qty, COALESCE(o.poster_qty,0) poster_qty, COALESCE(o.total,0) total, COALESCE(o.standard_amt_usd,0) standard_amt_usd, COALESCE(o.gloss_amt_usd,0) gloss_amt_usd, COALESCE(o.poster_amt_usd,0) poster_amt_usd, COALESCE(o.total_amt_usd,0) total_amt_usd\nFROM accounts a\nLEFT JOIN orders o\nON a.id = o.account_id\nWHERE o.total IS NULL;\n```\n\n5. \n```\nSELECT COUNT(*)\nFROM accounts a\nLEFT JOIN orders o\nON a.id = o.account_id;\n```\n\n6. \n```\nSELECT COALESCE(a.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, COALESCE(o.account_id, a.id) account_id, o.occurred_at, COALESCE(o.standard_qty, 0) standard_qty, COALESCE(o.gloss_qty,0) gloss_qty, COALESCE(o.poster_qty,0) poster_qty, COALESCE(o.total,0) total, COALESCE(o.standard_amt_usd,0) standard_amt_usd, COALESCE(o.gloss_amt_usd,0) gloss_amt_usd, COALESCE(o.poster_amt_usd,0) poster_amt_usd, COALESCE(o.total_amt_usd,0) total_amt_usd\nFROM accounts a\nLEFT JOIN orders o\nON a.id = o.account_id;\n```",
              "instructor_notes": ""
            },
            {
              "id": 558948,
              "key": "430dc6d1-10e9-4602-9273-a75d6c6aea4d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewee50805b",
              "pool_id": "sqlwidget",
              "view_id": "78ec1b5c-4e0b-41aa-a17e-22f35b382c47",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 392131,
          "key": "1c6b8b8b-198e-4667-9f7b-360e96597a75",
          "title": "Video + Text: Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1c6b8b8b-198e-4667-9f7b-360e96597a75",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 406817,
              "key": "09d36f22-5f6e-49dc-b47f-c4a2f9906add",
              "title": "Data Cleaning Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KkHqnvD9BWY",
                "china_cdn_id": "KkHqnvD9BWY.mp4"
              }
            },
            {
              "id": 415719,
              "key": "289b2ed1-99e2-4ed9-96f2-87cdc1fe63df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You now have a number of tools to assist in cleaning messy data in SQL. Manually cleaning data is tedious, but you now can clean data at scale using your new skills.  \n\n_______\n\nFor a reminder on any of the data cleaning functionality, the concepts in this lesson are labeled according to the functions you learned. If you felt uncomfortable with any of these functions at first, that is normal - these take some getting used to. Don't be afraid to take a second pass through the material to sharpen your skills!\n\nMemorizing all of this functionality isn't necessary, but you do need to be able to follow documentation, and learn from what you have done in solving previous problems to solve new problems.  \n\nThere are a few other functions that work similarly.  You can read more about those [here](https://www.w3schools.com/sql/sql_isnull.asp).  You can also get a walk through of many of the functions you have seen throughout this lesson [here](https://mode.com/resources/sql-tutorial/sql-string-functions-for-cleaning).\n\nNice job on this section!",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    }
  ]
}